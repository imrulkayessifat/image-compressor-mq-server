
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Store
 * 
 */
export type Store = $Result.DefaultSelection<Prisma.$StorePayload>
/**
 * Model Filerename
 * 
 */
export type Filerename = $Result.DefaultSelection<Prisma.$FilerenamePayload>
/**
 * Model Altrename
 * 
 */
export type Altrename = $Result.DefaultSelection<Prisma.$AltrenamePayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model Backupimage
 * 
 */
export type Backupimage = $Result.DefaultSelection<Prisma.$BackupimagePayload>
/**
 * Model Backupfilename
 * 
 */
export type Backupfilename = $Result.DefaultSelection<Prisma.$BackupfilenamePayload>
/**
 * Model Backupaltname
 * 
 */
export type Backupaltname = $Result.DefaultSelection<Prisma.$BackupaltnamePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Plan: {
  FREE: 'FREE',
  MICRO: 'MICRO',
  PRO: 'PRO',
  ADVANCED: 'ADVANCED',
  PREMIUM: 'PREMIUM',
  PLUS: 'PLUS',
  ENTERPRISE: 'ENTERPRISE'
};

export type Plan = (typeof Plan)[keyof typeof Plan]


export const CompressType: {
  BALANCED: 'BALANCED',
  CONSERVATIVE: 'CONSERVATIVE',
  CUSTOM: 'CUSTOM'
};

export type CompressType = (typeof CompressType)[keyof typeof CompressType]


export const Status: {
  NOT_COMPRESSED: 'NOT_COMPRESSED',
  ONGOING: 'ONGOING',
  RESTORING: 'RESTORING',
  COMPRESSED: 'COMPRESSED'
};

export type Status = (typeof Status)[keyof typeof Status]

}

export type Plan = $Enums.Plan

export const Plan: typeof $Enums.Plan

export type CompressType = $Enums.CompressType

export const CompressType: typeof $Enums.CompressType

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Stores
 * const stores = await prisma.store.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Stores
   * const stores = await prisma.store.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.store`: Exposes CRUD operations for the **Store** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stores
    * const stores = await prisma.store.findMany()
    * ```
    */
  get store(): Prisma.StoreDelegate<ExtArgs>;

  /**
   * `prisma.filerename`: Exposes CRUD operations for the **Filerename** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Filerenames
    * const filerenames = await prisma.filerename.findMany()
    * ```
    */
  get filerename(): Prisma.FilerenameDelegate<ExtArgs>;

  /**
   * `prisma.altrename`: Exposes CRUD operations for the **Altrename** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Altrenames
    * const altrenames = await prisma.altrename.findMany()
    * ```
    */
  get altrename(): Prisma.AltrenameDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs>;

  /**
   * `prisma.backupimage`: Exposes CRUD operations for the **Backupimage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Backupimages
    * const backupimages = await prisma.backupimage.findMany()
    * ```
    */
  get backupimage(): Prisma.BackupimageDelegate<ExtArgs>;

  /**
   * `prisma.backupfilename`: Exposes CRUD operations for the **Backupfilename** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Backupfilenames
    * const backupfilenames = await prisma.backupfilename.findMany()
    * ```
    */
  get backupfilename(): Prisma.BackupfilenameDelegate<ExtArgs>;

  /**
   * `prisma.backupaltname`: Exposes CRUD operations for the **Backupaltname** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Backupaltnames
    * const backupaltnames = await prisma.backupaltname.findMany()
    * ```
    */
  get backupaltname(): Prisma.BackupaltnameDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Store: 'Store',
    Filerename: 'Filerename',
    Altrename: 'Altrename',
    Product: 'Product',
    Image: 'Image',
    Backupimage: 'Backupimage',
    Backupfilename: 'Backupfilename',
    Backupaltname: 'Backupaltname'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'store' | 'filerename' | 'altrename' | 'product' | 'image' | 'backupimage' | 'backupfilename' | 'backupaltname'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Store: {
        payload: Prisma.$StorePayload<ExtArgs>
        fields: Prisma.StoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoreFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoreFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findFirst: {
            args: Prisma.StoreFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoreFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findMany: {
            args: Prisma.StoreFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          create: {
            args: Prisma.StoreCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          createMany: {
            args: Prisma.StoreCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StoreDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          update: {
            args: Prisma.StoreUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          deleteMany: {
            args: Prisma.StoreDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StoreUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StoreUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          aggregate: {
            args: Prisma.StoreAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStore>
          }
          groupBy: {
            args: Prisma.StoreGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoreCountArgs<ExtArgs>,
            result: $Utils.Optional<StoreCountAggregateOutputType> | number
          }
        }
      }
      Filerename: {
        payload: Prisma.$FilerenamePayload<ExtArgs>
        fields: Prisma.FilerenameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FilerenameFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilerenamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FilerenameFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilerenamePayload>
          }
          findFirst: {
            args: Prisma.FilerenameFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilerenamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FilerenameFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilerenamePayload>
          }
          findMany: {
            args: Prisma.FilerenameFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilerenamePayload>[]
          }
          create: {
            args: Prisma.FilerenameCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilerenamePayload>
          }
          createMany: {
            args: Prisma.FilerenameCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FilerenameDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilerenamePayload>
          }
          update: {
            args: Prisma.FilerenameUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilerenamePayload>
          }
          deleteMany: {
            args: Prisma.FilerenameDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FilerenameUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FilerenameUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilerenamePayload>
          }
          aggregate: {
            args: Prisma.FilerenameAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFilerename>
          }
          groupBy: {
            args: Prisma.FilerenameGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FilerenameGroupByOutputType>[]
          }
          count: {
            args: Prisma.FilerenameCountArgs<ExtArgs>,
            result: $Utils.Optional<FilerenameCountAggregateOutputType> | number
          }
        }
      }
      Altrename: {
        payload: Prisma.$AltrenamePayload<ExtArgs>
        fields: Prisma.AltrenameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AltrenameFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AltrenamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AltrenameFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AltrenamePayload>
          }
          findFirst: {
            args: Prisma.AltrenameFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AltrenamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AltrenameFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AltrenamePayload>
          }
          findMany: {
            args: Prisma.AltrenameFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AltrenamePayload>[]
          }
          create: {
            args: Prisma.AltrenameCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AltrenamePayload>
          }
          createMany: {
            args: Prisma.AltrenameCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AltrenameDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AltrenamePayload>
          }
          update: {
            args: Prisma.AltrenameUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AltrenamePayload>
          }
          deleteMany: {
            args: Prisma.AltrenameDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AltrenameUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AltrenameUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AltrenamePayload>
          }
          aggregate: {
            args: Prisma.AltrenameAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAltrename>
          }
          groupBy: {
            args: Prisma.AltrenameGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AltrenameGroupByOutputType>[]
          }
          count: {
            args: Prisma.AltrenameCountArgs<ExtArgs>,
            result: $Utils.Optional<AltrenameCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>,
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      Backupimage: {
        payload: Prisma.$BackupimagePayload<ExtArgs>
        fields: Prisma.BackupimageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BackupimageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupimagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BackupimageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupimagePayload>
          }
          findFirst: {
            args: Prisma.BackupimageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupimagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BackupimageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupimagePayload>
          }
          findMany: {
            args: Prisma.BackupimageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupimagePayload>[]
          }
          create: {
            args: Prisma.BackupimageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupimagePayload>
          }
          createMany: {
            args: Prisma.BackupimageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BackupimageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupimagePayload>
          }
          update: {
            args: Prisma.BackupimageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupimagePayload>
          }
          deleteMany: {
            args: Prisma.BackupimageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BackupimageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BackupimageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupimagePayload>
          }
          aggregate: {
            args: Prisma.BackupimageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBackupimage>
          }
          groupBy: {
            args: Prisma.BackupimageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BackupimageGroupByOutputType>[]
          }
          count: {
            args: Prisma.BackupimageCountArgs<ExtArgs>,
            result: $Utils.Optional<BackupimageCountAggregateOutputType> | number
          }
        }
      }
      Backupfilename: {
        payload: Prisma.$BackupfilenamePayload<ExtArgs>
        fields: Prisma.BackupfilenameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BackupfilenameFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupfilenamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BackupfilenameFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupfilenamePayload>
          }
          findFirst: {
            args: Prisma.BackupfilenameFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupfilenamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BackupfilenameFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupfilenamePayload>
          }
          findMany: {
            args: Prisma.BackupfilenameFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupfilenamePayload>[]
          }
          create: {
            args: Prisma.BackupfilenameCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupfilenamePayload>
          }
          createMany: {
            args: Prisma.BackupfilenameCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BackupfilenameDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupfilenamePayload>
          }
          update: {
            args: Prisma.BackupfilenameUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupfilenamePayload>
          }
          deleteMany: {
            args: Prisma.BackupfilenameDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BackupfilenameUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BackupfilenameUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupfilenamePayload>
          }
          aggregate: {
            args: Prisma.BackupfilenameAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBackupfilename>
          }
          groupBy: {
            args: Prisma.BackupfilenameGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BackupfilenameGroupByOutputType>[]
          }
          count: {
            args: Prisma.BackupfilenameCountArgs<ExtArgs>,
            result: $Utils.Optional<BackupfilenameCountAggregateOutputType> | number
          }
        }
      }
      Backupaltname: {
        payload: Prisma.$BackupaltnamePayload<ExtArgs>
        fields: Prisma.BackupaltnameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BackupaltnameFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupaltnamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BackupaltnameFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupaltnamePayload>
          }
          findFirst: {
            args: Prisma.BackupaltnameFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupaltnamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BackupaltnameFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupaltnamePayload>
          }
          findMany: {
            args: Prisma.BackupaltnameFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupaltnamePayload>[]
          }
          create: {
            args: Prisma.BackupaltnameCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupaltnamePayload>
          }
          createMany: {
            args: Prisma.BackupaltnameCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BackupaltnameDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupaltnamePayload>
          }
          update: {
            args: Prisma.BackupaltnameUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupaltnamePayload>
          }
          deleteMany: {
            args: Prisma.BackupaltnameDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BackupaltnameUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BackupaltnameUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BackupaltnamePayload>
          }
          aggregate: {
            args: Prisma.BackupaltnameAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBackupaltname>
          }
          groupBy: {
            args: Prisma.BackupaltnameGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BackupaltnameGroupByOutputType>[]
          }
          count: {
            args: Prisma.BackupaltnameCountArgs<ExtArgs>,
            result: $Utils.Optional<BackupaltnameCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StoreCountOutputType
   */

  export type StoreCountOutputType = {
    product: number
    filerename: number
    altrename: number
  }

  export type StoreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | StoreCountOutputTypeCountProductArgs
    filerename?: boolean | StoreCountOutputTypeCountFilerenameArgs
    altrename?: boolean | StoreCountOutputTypeCountAltrenameArgs
  }

  // Custom InputTypes

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreCountOutputType
     */
    select?: StoreCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountFilerenameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FilerenameWhereInput
  }


  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountAltrenameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AltrenameWhereInput
  }



  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    images: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | ProductCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Store
   */

  export type AggregateStore = {
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  export type StoreAvgAggregateOutputType = {
    dataUsed: number | null
    jpeg: number | null
    png: number | null
    others: number | null
  }

  export type StoreSumAggregateOutputType = {
    dataUsed: number | null
    jpeg: number | null
    png: number | null
    others: number | null
  }

  export type StoreMinAggregateOutputType = {
    name: string | null
    plan: $Enums.Plan | null
    dataUsed: number | null
    chargeId: string | null
    autoCompression: boolean | null
    autoFileRename: boolean | null
    batchCompress: boolean | null
    batchRestore: boolean | null
    autoAltRename: boolean | null
    compressionType: $Enums.CompressType | null
    jpeg: number | null
    png: number | null
    others: number | null
  }

  export type StoreMaxAggregateOutputType = {
    name: string | null
    plan: $Enums.Plan | null
    dataUsed: number | null
    chargeId: string | null
    autoCompression: boolean | null
    autoFileRename: boolean | null
    batchCompress: boolean | null
    batchRestore: boolean | null
    autoAltRename: boolean | null
    compressionType: $Enums.CompressType | null
    jpeg: number | null
    png: number | null
    others: number | null
  }

  export type StoreCountAggregateOutputType = {
    name: number
    plan: number
    dataUsed: number
    chargeId: number
    autoCompression: number
    autoFileRename: number
    batchCompress: number
    batchRestore: number
    autoAltRename: number
    compressionType: number
    jpeg: number
    png: number
    others: number
    _all: number
  }


  export type StoreAvgAggregateInputType = {
    dataUsed?: true
    jpeg?: true
    png?: true
    others?: true
  }

  export type StoreSumAggregateInputType = {
    dataUsed?: true
    jpeg?: true
    png?: true
    others?: true
  }

  export type StoreMinAggregateInputType = {
    name?: true
    plan?: true
    dataUsed?: true
    chargeId?: true
    autoCompression?: true
    autoFileRename?: true
    batchCompress?: true
    batchRestore?: true
    autoAltRename?: true
    compressionType?: true
    jpeg?: true
    png?: true
    others?: true
  }

  export type StoreMaxAggregateInputType = {
    name?: true
    plan?: true
    dataUsed?: true
    chargeId?: true
    autoCompression?: true
    autoFileRename?: true
    batchCompress?: true
    batchRestore?: true
    autoAltRename?: true
    compressionType?: true
    jpeg?: true
    png?: true
    others?: true
  }

  export type StoreCountAggregateInputType = {
    name?: true
    plan?: true
    dataUsed?: true
    chargeId?: true
    autoCompression?: true
    autoFileRename?: true
    batchCompress?: true
    batchRestore?: true
    autoAltRename?: true
    compressionType?: true
    jpeg?: true
    png?: true
    others?: true
    _all?: true
  }

  export type StoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Store to aggregate.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stores
    **/
    _count?: true | StoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreMaxAggregateInputType
  }

  export type GetStoreAggregateType<T extends StoreAggregateArgs> = {
        [P in keyof T & keyof AggregateStore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStore[P]>
      : GetScalarType<T[P], AggregateStore[P]>
  }




  export type StoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithAggregationInput | StoreOrderByWithAggregationInput[]
    by: StoreScalarFieldEnum[] | StoreScalarFieldEnum
    having?: StoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreCountAggregateInputType | true
    _avg?: StoreAvgAggregateInputType
    _sum?: StoreSumAggregateInputType
    _min?: StoreMinAggregateInputType
    _max?: StoreMaxAggregateInputType
  }

  export type StoreGroupByOutputType = {
    name: string
    plan: $Enums.Plan
    dataUsed: number | null
    chargeId: string | null
    autoCompression: boolean
    autoFileRename: boolean
    batchCompress: boolean
    batchRestore: boolean
    autoAltRename: boolean
    compressionType: $Enums.CompressType | null
    jpeg: number | null
    png: number | null
    others: number | null
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  type GetStoreGroupByPayload<T extends StoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreGroupByOutputType[P]>
            : GetScalarType<T[P], StoreGroupByOutputType[P]>
        }
      >
    >


  export type StoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    plan?: boolean
    dataUsed?: boolean
    chargeId?: boolean
    autoCompression?: boolean
    autoFileRename?: boolean
    batchCompress?: boolean
    batchRestore?: boolean
    autoAltRename?: boolean
    compressionType?: boolean
    jpeg?: boolean
    png?: boolean
    others?: boolean
    product?: boolean | Store$productArgs<ExtArgs>
    filerename?: boolean | Store$filerenameArgs<ExtArgs>
    altrename?: boolean | Store$altrenameArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type StoreSelectScalar = {
    name?: boolean
    plan?: boolean
    dataUsed?: boolean
    chargeId?: boolean
    autoCompression?: boolean
    autoFileRename?: boolean
    batchCompress?: boolean
    batchRestore?: boolean
    autoAltRename?: boolean
    compressionType?: boolean
    jpeg?: boolean
    png?: boolean
    others?: boolean
  }

  export type StoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | Store$productArgs<ExtArgs>
    filerename?: boolean | Store$filerenameArgs<ExtArgs>
    altrename?: boolean | Store$altrenameArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Store"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>[]
      filerename: Prisma.$FilerenamePayload<ExtArgs>[]
      altrename: Prisma.$AltrenamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      plan: $Enums.Plan
      dataUsed: number | null
      chargeId: string | null
      autoCompression: boolean
      autoFileRename: boolean
      batchCompress: boolean
      batchRestore: boolean
      autoAltRename: boolean
      compressionType: $Enums.CompressType | null
      jpeg: number | null
      png: number | null
      others: number | null
    }, ExtArgs["result"]["store"]>
    composites: {}
  }


  type StoreGetPayload<S extends boolean | null | undefined | StoreDefaultArgs> = $Result.GetResult<Prisma.$StorePayload, S>

  type StoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StoreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StoreCountAggregateInputType | true
    }

  export interface StoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Store'], meta: { name: 'Store' } }
    /**
     * Find zero or one Store that matches the filter.
     * @param {StoreFindUniqueArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StoreFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StoreFindUniqueArgs<ExtArgs>>
    ): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Store that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StoreFindUniqueOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StoreFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StoreFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Store that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StoreFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StoreFindFirstArgs<ExtArgs>>
    ): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Store that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StoreFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StoreFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Stores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stores
     * const stores = await prisma.store.findMany()
     * 
     * // Get first 10 Stores
     * const stores = await prisma.store.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const storeWithNameOnly = await prisma.store.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends StoreFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StoreFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Store.
     * @param {StoreCreateArgs} args - Arguments to create a Store.
     * @example
     * // Create one Store
     * const Store = await prisma.store.create({
     *   data: {
     *     // ... data to create a Store
     *   }
     * })
     * 
    **/
    create<T extends StoreCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StoreCreateArgs<ExtArgs>>
    ): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Stores.
     *     @param {StoreCreateManyArgs} args - Arguments to create many Stores.
     *     @example
     *     // Create many Stores
     *     const store = await prisma.store.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StoreCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StoreCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Store.
     * @param {StoreDeleteArgs} args - Arguments to delete one Store.
     * @example
     * // Delete one Store
     * const Store = await prisma.store.delete({
     *   where: {
     *     // ... filter to delete one Store
     *   }
     * })
     * 
    **/
    delete<T extends StoreDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StoreDeleteArgs<ExtArgs>>
    ): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Store.
     * @param {StoreUpdateArgs} args - Arguments to update one Store.
     * @example
     * // Update one Store
     * const store = await prisma.store.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StoreUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StoreUpdateArgs<ExtArgs>>
    ): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Stores.
     * @param {StoreDeleteManyArgs} args - Arguments to filter Stores to delete.
     * @example
     * // Delete a few Stores
     * const { count } = await prisma.store.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StoreDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StoreDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StoreUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StoreUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Store.
     * @param {StoreUpsertArgs} args - Arguments to update or create a Store.
     * @example
     * // Update or create a Store
     * const store = await prisma.store.upsert({
     *   create: {
     *     // ... data to create a Store
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Store we want to update
     *   }
     * })
    **/
    upsert<T extends StoreUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StoreUpsertArgs<ExtArgs>>
    ): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreCountArgs} args - Arguments to filter Stores to count.
     * @example
     * // Count the number of Stores
     * const count = await prisma.store.count({
     *   where: {
     *     // ... the filter for the Stores we want to count
     *   }
     * })
    **/
    count<T extends StoreCountArgs>(
      args?: Subset<T, StoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreAggregateArgs>(args: Subset<T, StoreAggregateArgs>): Prisma.PrismaPromise<GetStoreAggregateType<T>>

    /**
     * Group by Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoreGroupByArgs['orderBy'] }
        : { orderBy?: StoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Store model
   */
  readonly fields: StoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Store.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends Store$productArgs<ExtArgs> = {}>(args?: Subset<T, Store$productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    filerename<T extends Store$filerenameArgs<ExtArgs> = {}>(args?: Subset<T, Store$filerenameArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilerenamePayload<ExtArgs>, T, 'findMany'> | Null>;

    altrename<T extends Store$altrenameArgs<ExtArgs> = {}>(args?: Subset<T, Store$altrenameArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AltrenamePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Store model
   */ 
  interface StoreFieldRefs {
    readonly name: FieldRef<"Store", 'String'>
    readonly plan: FieldRef<"Store", 'Plan'>
    readonly dataUsed: FieldRef<"Store", 'Float'>
    readonly chargeId: FieldRef<"Store", 'String'>
    readonly autoCompression: FieldRef<"Store", 'Boolean'>
    readonly autoFileRename: FieldRef<"Store", 'Boolean'>
    readonly batchCompress: FieldRef<"Store", 'Boolean'>
    readonly batchRestore: FieldRef<"Store", 'Boolean'>
    readonly autoAltRename: FieldRef<"Store", 'Boolean'>
    readonly compressionType: FieldRef<"Store", 'CompressType'>
    readonly jpeg: FieldRef<"Store", 'Float'>
    readonly png: FieldRef<"Store", 'Float'>
    readonly others: FieldRef<"Store", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * Store findUnique
   */
  export type StoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }


  /**
   * Store findUniqueOrThrow
   */
  export type StoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }


  /**
   * Store findFirst
   */
  export type StoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }


  /**
   * Store findFirstOrThrow
   */
  export type StoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }


  /**
   * Store findMany
   */
  export type StoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Stores to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }


  /**
   * Store create
   */
  export type StoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The data needed to create a Store.
     */
    data: XOR<StoreCreateInput, StoreUncheckedCreateInput>
  }


  /**
   * Store createMany
   */
  export type StoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stores.
     */
    data: StoreCreateManyInput | StoreCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Store update
   */
  export type StoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The data needed to update a Store.
     */
    data: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
    /**
     * Choose, which Store to update.
     */
    where: StoreWhereUniqueInput
  }


  /**
   * Store updateMany
   */
  export type StoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stores.
     */
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyInput>
    /**
     * Filter which Stores to update
     */
    where?: StoreWhereInput
  }


  /**
   * Store upsert
   */
  export type StoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The filter to search for the Store to update in case it exists.
     */
    where: StoreWhereUniqueInput
    /**
     * In case the Store found by the `where` argument doesn't exist, create a new Store with this data.
     */
    create: XOR<StoreCreateInput, StoreUncheckedCreateInput>
    /**
     * In case the Store was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
  }


  /**
   * Store delete
   */
  export type StoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter which Store to delete.
     */
    where: StoreWhereUniqueInput
  }


  /**
   * Store deleteMany
   */
  export type StoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stores to delete
     */
    where?: StoreWhereInput
  }


  /**
   * Store.product
   */
  export type Store$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Store.filerename
   */
  export type Store$filerenameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Filerename
     */
    select?: FilerenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilerenameInclude<ExtArgs> | null
    where?: FilerenameWhereInput
    orderBy?: FilerenameOrderByWithRelationInput | FilerenameOrderByWithRelationInput[]
    cursor?: FilerenameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FilerenameScalarFieldEnum | FilerenameScalarFieldEnum[]
  }


  /**
   * Store.altrename
   */
  export type Store$altrenameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Altrename
     */
    select?: AltrenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AltrenameInclude<ExtArgs> | null
    where?: AltrenameWhereInput
    orderBy?: AltrenameOrderByWithRelationInput | AltrenameOrderByWithRelationInput[]
    cursor?: AltrenameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AltrenameScalarFieldEnum | AltrenameScalarFieldEnum[]
  }


  /**
   * Store without action
   */
  export type StoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoreInclude<ExtArgs> | null
  }



  /**
   * Model Filerename
   */

  export type AggregateFilerename = {
    _count: FilerenameCountAggregateOutputType | null
    _min: FilerenameMinAggregateOutputType | null
    _max: FilerenameMaxAggregateOutputType | null
  }

  export type FilerenameMinAggregateOutputType = {
    id: string | null
    product_vendor: boolean | null
    variant_title: boolean | null
    product_page_title: boolean | null
    product_type: boolean | null
    product_barcode: boolean | null
    product_title: boolean | null
    product_sku: boolean | null
    storename: string | null
  }

  export type FilerenameMaxAggregateOutputType = {
    id: string | null
    product_vendor: boolean | null
    variant_title: boolean | null
    product_page_title: boolean | null
    product_type: boolean | null
    product_barcode: boolean | null
    product_title: boolean | null
    product_sku: boolean | null
    storename: string | null
  }

  export type FilerenameCountAggregateOutputType = {
    id: number
    product_vendor: number
    variant_title: number
    product_page_title: number
    product_type: number
    product_barcode: number
    product_title: number
    product_sku: number
    storename: number
    _all: number
  }


  export type FilerenameMinAggregateInputType = {
    id?: true
    product_vendor?: true
    variant_title?: true
    product_page_title?: true
    product_type?: true
    product_barcode?: true
    product_title?: true
    product_sku?: true
    storename?: true
  }

  export type FilerenameMaxAggregateInputType = {
    id?: true
    product_vendor?: true
    variant_title?: true
    product_page_title?: true
    product_type?: true
    product_barcode?: true
    product_title?: true
    product_sku?: true
    storename?: true
  }

  export type FilerenameCountAggregateInputType = {
    id?: true
    product_vendor?: true
    variant_title?: true
    product_page_title?: true
    product_type?: true
    product_barcode?: true
    product_title?: true
    product_sku?: true
    storename?: true
    _all?: true
  }

  export type FilerenameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Filerename to aggregate.
     */
    where?: FilerenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Filerenames to fetch.
     */
    orderBy?: FilerenameOrderByWithRelationInput | FilerenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FilerenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Filerenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Filerenames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Filerenames
    **/
    _count?: true | FilerenameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FilerenameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FilerenameMaxAggregateInputType
  }

  export type GetFilerenameAggregateType<T extends FilerenameAggregateArgs> = {
        [P in keyof T & keyof AggregateFilerename]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFilerename[P]>
      : GetScalarType<T[P], AggregateFilerename[P]>
  }




  export type FilerenameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FilerenameWhereInput
    orderBy?: FilerenameOrderByWithAggregationInput | FilerenameOrderByWithAggregationInput[]
    by: FilerenameScalarFieldEnum[] | FilerenameScalarFieldEnum
    having?: FilerenameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FilerenameCountAggregateInputType | true
    _min?: FilerenameMinAggregateInputType
    _max?: FilerenameMaxAggregateInputType
  }

  export type FilerenameGroupByOutputType = {
    id: string
    product_vendor: boolean
    variant_title: boolean
    product_page_title: boolean
    product_type: boolean
    product_barcode: boolean
    product_title: boolean
    product_sku: boolean
    storename: string
    _count: FilerenameCountAggregateOutputType | null
    _min: FilerenameMinAggregateOutputType | null
    _max: FilerenameMaxAggregateOutputType | null
  }

  type GetFilerenameGroupByPayload<T extends FilerenameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FilerenameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FilerenameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FilerenameGroupByOutputType[P]>
            : GetScalarType<T[P], FilerenameGroupByOutputType[P]>
        }
      >
    >


  export type FilerenameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    storename?: boolean
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["filerename"]>

  export type FilerenameSelectScalar = {
    id?: boolean
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    storename?: boolean
  }

  export type FilerenameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }


  export type $FilerenamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Filerename"
    objects: {
      store: Prisma.$StorePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      product_vendor: boolean
      variant_title: boolean
      product_page_title: boolean
      product_type: boolean
      product_barcode: boolean
      product_title: boolean
      product_sku: boolean
      storename: string
    }, ExtArgs["result"]["filerename"]>
    composites: {}
  }


  type FilerenameGetPayload<S extends boolean | null | undefined | FilerenameDefaultArgs> = $Result.GetResult<Prisma.$FilerenamePayload, S>

  type FilerenameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FilerenameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FilerenameCountAggregateInputType | true
    }

  export interface FilerenameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Filerename'], meta: { name: 'Filerename' } }
    /**
     * Find zero or one Filerename that matches the filter.
     * @param {FilerenameFindUniqueArgs} args - Arguments to find a Filerename
     * @example
     * // Get one Filerename
     * const filerename = await prisma.filerename.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FilerenameFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FilerenameFindUniqueArgs<ExtArgs>>
    ): Prisma__FilerenameClient<$Result.GetResult<Prisma.$FilerenamePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Filerename that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FilerenameFindUniqueOrThrowArgs} args - Arguments to find a Filerename
     * @example
     * // Get one Filerename
     * const filerename = await prisma.filerename.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FilerenameFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FilerenameFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FilerenameClient<$Result.GetResult<Prisma.$FilerenamePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Filerename that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilerenameFindFirstArgs} args - Arguments to find a Filerename
     * @example
     * // Get one Filerename
     * const filerename = await prisma.filerename.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FilerenameFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FilerenameFindFirstArgs<ExtArgs>>
    ): Prisma__FilerenameClient<$Result.GetResult<Prisma.$FilerenamePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Filerename that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilerenameFindFirstOrThrowArgs} args - Arguments to find a Filerename
     * @example
     * // Get one Filerename
     * const filerename = await prisma.filerename.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FilerenameFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FilerenameFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FilerenameClient<$Result.GetResult<Prisma.$FilerenamePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Filerenames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilerenameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Filerenames
     * const filerenames = await prisma.filerename.findMany()
     * 
     * // Get first 10 Filerenames
     * const filerenames = await prisma.filerename.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const filerenameWithIdOnly = await prisma.filerename.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FilerenameFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FilerenameFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilerenamePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Filerename.
     * @param {FilerenameCreateArgs} args - Arguments to create a Filerename.
     * @example
     * // Create one Filerename
     * const Filerename = await prisma.filerename.create({
     *   data: {
     *     // ... data to create a Filerename
     *   }
     * })
     * 
    **/
    create<T extends FilerenameCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FilerenameCreateArgs<ExtArgs>>
    ): Prisma__FilerenameClient<$Result.GetResult<Prisma.$FilerenamePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Filerenames.
     *     @param {FilerenameCreateManyArgs} args - Arguments to create many Filerenames.
     *     @example
     *     // Create many Filerenames
     *     const filerename = await prisma.filerename.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FilerenameCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FilerenameCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Filerename.
     * @param {FilerenameDeleteArgs} args - Arguments to delete one Filerename.
     * @example
     * // Delete one Filerename
     * const Filerename = await prisma.filerename.delete({
     *   where: {
     *     // ... filter to delete one Filerename
     *   }
     * })
     * 
    **/
    delete<T extends FilerenameDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FilerenameDeleteArgs<ExtArgs>>
    ): Prisma__FilerenameClient<$Result.GetResult<Prisma.$FilerenamePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Filerename.
     * @param {FilerenameUpdateArgs} args - Arguments to update one Filerename.
     * @example
     * // Update one Filerename
     * const filerename = await prisma.filerename.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FilerenameUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FilerenameUpdateArgs<ExtArgs>>
    ): Prisma__FilerenameClient<$Result.GetResult<Prisma.$FilerenamePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Filerenames.
     * @param {FilerenameDeleteManyArgs} args - Arguments to filter Filerenames to delete.
     * @example
     * // Delete a few Filerenames
     * const { count } = await prisma.filerename.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FilerenameDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FilerenameDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Filerenames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilerenameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Filerenames
     * const filerename = await prisma.filerename.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FilerenameUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FilerenameUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Filerename.
     * @param {FilerenameUpsertArgs} args - Arguments to update or create a Filerename.
     * @example
     * // Update or create a Filerename
     * const filerename = await prisma.filerename.upsert({
     *   create: {
     *     // ... data to create a Filerename
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Filerename we want to update
     *   }
     * })
    **/
    upsert<T extends FilerenameUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FilerenameUpsertArgs<ExtArgs>>
    ): Prisma__FilerenameClient<$Result.GetResult<Prisma.$FilerenamePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Filerenames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilerenameCountArgs} args - Arguments to filter Filerenames to count.
     * @example
     * // Count the number of Filerenames
     * const count = await prisma.filerename.count({
     *   where: {
     *     // ... the filter for the Filerenames we want to count
     *   }
     * })
    **/
    count<T extends FilerenameCountArgs>(
      args?: Subset<T, FilerenameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FilerenameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Filerename.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilerenameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FilerenameAggregateArgs>(args: Subset<T, FilerenameAggregateArgs>): Prisma.PrismaPromise<GetFilerenameAggregateType<T>>

    /**
     * Group by Filerename.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilerenameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FilerenameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FilerenameGroupByArgs['orderBy'] }
        : { orderBy?: FilerenameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FilerenameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilerenameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Filerename model
   */
  readonly fields: FilerenameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Filerename.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FilerenameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Filerename model
   */ 
  interface FilerenameFieldRefs {
    readonly id: FieldRef<"Filerename", 'String'>
    readonly product_vendor: FieldRef<"Filerename", 'Boolean'>
    readonly variant_title: FieldRef<"Filerename", 'Boolean'>
    readonly product_page_title: FieldRef<"Filerename", 'Boolean'>
    readonly product_type: FieldRef<"Filerename", 'Boolean'>
    readonly product_barcode: FieldRef<"Filerename", 'Boolean'>
    readonly product_title: FieldRef<"Filerename", 'Boolean'>
    readonly product_sku: FieldRef<"Filerename", 'Boolean'>
    readonly storename: FieldRef<"Filerename", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Filerename findUnique
   */
  export type FilerenameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Filerename
     */
    select?: FilerenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilerenameInclude<ExtArgs> | null
    /**
     * Filter, which Filerename to fetch.
     */
    where: FilerenameWhereUniqueInput
  }


  /**
   * Filerename findUniqueOrThrow
   */
  export type FilerenameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Filerename
     */
    select?: FilerenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilerenameInclude<ExtArgs> | null
    /**
     * Filter, which Filerename to fetch.
     */
    where: FilerenameWhereUniqueInput
  }


  /**
   * Filerename findFirst
   */
  export type FilerenameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Filerename
     */
    select?: FilerenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilerenameInclude<ExtArgs> | null
    /**
     * Filter, which Filerename to fetch.
     */
    where?: FilerenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Filerenames to fetch.
     */
    orderBy?: FilerenameOrderByWithRelationInput | FilerenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Filerenames.
     */
    cursor?: FilerenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Filerenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Filerenames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Filerenames.
     */
    distinct?: FilerenameScalarFieldEnum | FilerenameScalarFieldEnum[]
  }


  /**
   * Filerename findFirstOrThrow
   */
  export type FilerenameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Filerename
     */
    select?: FilerenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilerenameInclude<ExtArgs> | null
    /**
     * Filter, which Filerename to fetch.
     */
    where?: FilerenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Filerenames to fetch.
     */
    orderBy?: FilerenameOrderByWithRelationInput | FilerenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Filerenames.
     */
    cursor?: FilerenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Filerenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Filerenames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Filerenames.
     */
    distinct?: FilerenameScalarFieldEnum | FilerenameScalarFieldEnum[]
  }


  /**
   * Filerename findMany
   */
  export type FilerenameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Filerename
     */
    select?: FilerenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilerenameInclude<ExtArgs> | null
    /**
     * Filter, which Filerenames to fetch.
     */
    where?: FilerenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Filerenames to fetch.
     */
    orderBy?: FilerenameOrderByWithRelationInput | FilerenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Filerenames.
     */
    cursor?: FilerenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Filerenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Filerenames.
     */
    skip?: number
    distinct?: FilerenameScalarFieldEnum | FilerenameScalarFieldEnum[]
  }


  /**
   * Filerename create
   */
  export type FilerenameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Filerename
     */
    select?: FilerenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilerenameInclude<ExtArgs> | null
    /**
     * The data needed to create a Filerename.
     */
    data: XOR<FilerenameCreateInput, FilerenameUncheckedCreateInput>
  }


  /**
   * Filerename createMany
   */
  export type FilerenameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Filerenames.
     */
    data: FilerenameCreateManyInput | FilerenameCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Filerename update
   */
  export type FilerenameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Filerename
     */
    select?: FilerenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilerenameInclude<ExtArgs> | null
    /**
     * The data needed to update a Filerename.
     */
    data: XOR<FilerenameUpdateInput, FilerenameUncheckedUpdateInput>
    /**
     * Choose, which Filerename to update.
     */
    where: FilerenameWhereUniqueInput
  }


  /**
   * Filerename updateMany
   */
  export type FilerenameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Filerenames.
     */
    data: XOR<FilerenameUpdateManyMutationInput, FilerenameUncheckedUpdateManyInput>
    /**
     * Filter which Filerenames to update
     */
    where?: FilerenameWhereInput
  }


  /**
   * Filerename upsert
   */
  export type FilerenameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Filerename
     */
    select?: FilerenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilerenameInclude<ExtArgs> | null
    /**
     * The filter to search for the Filerename to update in case it exists.
     */
    where: FilerenameWhereUniqueInput
    /**
     * In case the Filerename found by the `where` argument doesn't exist, create a new Filerename with this data.
     */
    create: XOR<FilerenameCreateInput, FilerenameUncheckedCreateInput>
    /**
     * In case the Filerename was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FilerenameUpdateInput, FilerenameUncheckedUpdateInput>
  }


  /**
   * Filerename delete
   */
  export type FilerenameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Filerename
     */
    select?: FilerenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilerenameInclude<ExtArgs> | null
    /**
     * Filter which Filerename to delete.
     */
    where: FilerenameWhereUniqueInput
  }


  /**
   * Filerename deleteMany
   */
  export type FilerenameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Filerenames to delete
     */
    where?: FilerenameWhereInput
  }


  /**
   * Filerename without action
   */
  export type FilerenameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Filerename
     */
    select?: FilerenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilerenameInclude<ExtArgs> | null
  }



  /**
   * Model Altrename
   */

  export type AggregateAltrename = {
    _count: AltrenameCountAggregateOutputType | null
    _min: AltrenameMinAggregateOutputType | null
    _max: AltrenameMaxAggregateOutputType | null
  }

  export type AltrenameMinAggregateOutputType = {
    id: string | null
    product_vendor: boolean | null
    variant_title: boolean | null
    product_page_title: boolean | null
    product_type: boolean | null
    product_barcode: boolean | null
    product_title: boolean | null
    product_sku: boolean | null
    storename: string | null
  }

  export type AltrenameMaxAggregateOutputType = {
    id: string | null
    product_vendor: boolean | null
    variant_title: boolean | null
    product_page_title: boolean | null
    product_type: boolean | null
    product_barcode: boolean | null
    product_title: boolean | null
    product_sku: boolean | null
    storename: string | null
  }

  export type AltrenameCountAggregateOutputType = {
    id: number
    product_vendor: number
    variant_title: number
    product_page_title: number
    product_type: number
    product_barcode: number
    product_title: number
    product_sku: number
    storename: number
    _all: number
  }


  export type AltrenameMinAggregateInputType = {
    id?: true
    product_vendor?: true
    variant_title?: true
    product_page_title?: true
    product_type?: true
    product_barcode?: true
    product_title?: true
    product_sku?: true
    storename?: true
  }

  export type AltrenameMaxAggregateInputType = {
    id?: true
    product_vendor?: true
    variant_title?: true
    product_page_title?: true
    product_type?: true
    product_barcode?: true
    product_title?: true
    product_sku?: true
    storename?: true
  }

  export type AltrenameCountAggregateInputType = {
    id?: true
    product_vendor?: true
    variant_title?: true
    product_page_title?: true
    product_type?: true
    product_barcode?: true
    product_title?: true
    product_sku?: true
    storename?: true
    _all?: true
  }

  export type AltrenameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Altrename to aggregate.
     */
    where?: AltrenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Altrenames to fetch.
     */
    orderBy?: AltrenameOrderByWithRelationInput | AltrenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AltrenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Altrenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Altrenames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Altrenames
    **/
    _count?: true | AltrenameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AltrenameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AltrenameMaxAggregateInputType
  }

  export type GetAltrenameAggregateType<T extends AltrenameAggregateArgs> = {
        [P in keyof T & keyof AggregateAltrename]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAltrename[P]>
      : GetScalarType<T[P], AggregateAltrename[P]>
  }




  export type AltrenameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AltrenameWhereInput
    orderBy?: AltrenameOrderByWithAggregationInput | AltrenameOrderByWithAggregationInput[]
    by: AltrenameScalarFieldEnum[] | AltrenameScalarFieldEnum
    having?: AltrenameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AltrenameCountAggregateInputType | true
    _min?: AltrenameMinAggregateInputType
    _max?: AltrenameMaxAggregateInputType
  }

  export type AltrenameGroupByOutputType = {
    id: string
    product_vendor: boolean
    variant_title: boolean
    product_page_title: boolean
    product_type: boolean
    product_barcode: boolean
    product_title: boolean
    product_sku: boolean
    storename: string
    _count: AltrenameCountAggregateOutputType | null
    _min: AltrenameMinAggregateOutputType | null
    _max: AltrenameMaxAggregateOutputType | null
  }

  type GetAltrenameGroupByPayload<T extends AltrenameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AltrenameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AltrenameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AltrenameGroupByOutputType[P]>
            : GetScalarType<T[P], AltrenameGroupByOutputType[P]>
        }
      >
    >


  export type AltrenameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    storename?: boolean
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["altrename"]>

  export type AltrenameSelectScalar = {
    id?: boolean
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    storename?: boolean
  }

  export type AltrenameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }


  export type $AltrenamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Altrename"
    objects: {
      store: Prisma.$StorePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      product_vendor: boolean
      variant_title: boolean
      product_page_title: boolean
      product_type: boolean
      product_barcode: boolean
      product_title: boolean
      product_sku: boolean
      storename: string
    }, ExtArgs["result"]["altrename"]>
    composites: {}
  }


  type AltrenameGetPayload<S extends boolean | null | undefined | AltrenameDefaultArgs> = $Result.GetResult<Prisma.$AltrenamePayload, S>

  type AltrenameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AltrenameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AltrenameCountAggregateInputType | true
    }

  export interface AltrenameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Altrename'], meta: { name: 'Altrename' } }
    /**
     * Find zero or one Altrename that matches the filter.
     * @param {AltrenameFindUniqueArgs} args - Arguments to find a Altrename
     * @example
     * // Get one Altrename
     * const altrename = await prisma.altrename.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AltrenameFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AltrenameFindUniqueArgs<ExtArgs>>
    ): Prisma__AltrenameClient<$Result.GetResult<Prisma.$AltrenamePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Altrename that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AltrenameFindUniqueOrThrowArgs} args - Arguments to find a Altrename
     * @example
     * // Get one Altrename
     * const altrename = await prisma.altrename.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AltrenameFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AltrenameFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AltrenameClient<$Result.GetResult<Prisma.$AltrenamePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Altrename that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AltrenameFindFirstArgs} args - Arguments to find a Altrename
     * @example
     * // Get one Altrename
     * const altrename = await prisma.altrename.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AltrenameFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AltrenameFindFirstArgs<ExtArgs>>
    ): Prisma__AltrenameClient<$Result.GetResult<Prisma.$AltrenamePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Altrename that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AltrenameFindFirstOrThrowArgs} args - Arguments to find a Altrename
     * @example
     * // Get one Altrename
     * const altrename = await prisma.altrename.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AltrenameFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AltrenameFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AltrenameClient<$Result.GetResult<Prisma.$AltrenamePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Altrenames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AltrenameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Altrenames
     * const altrenames = await prisma.altrename.findMany()
     * 
     * // Get first 10 Altrenames
     * const altrenames = await prisma.altrename.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const altrenameWithIdOnly = await prisma.altrename.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AltrenameFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AltrenameFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AltrenamePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Altrename.
     * @param {AltrenameCreateArgs} args - Arguments to create a Altrename.
     * @example
     * // Create one Altrename
     * const Altrename = await prisma.altrename.create({
     *   data: {
     *     // ... data to create a Altrename
     *   }
     * })
     * 
    **/
    create<T extends AltrenameCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AltrenameCreateArgs<ExtArgs>>
    ): Prisma__AltrenameClient<$Result.GetResult<Prisma.$AltrenamePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Altrenames.
     *     @param {AltrenameCreateManyArgs} args - Arguments to create many Altrenames.
     *     @example
     *     // Create many Altrenames
     *     const altrename = await prisma.altrename.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AltrenameCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AltrenameCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Altrename.
     * @param {AltrenameDeleteArgs} args - Arguments to delete one Altrename.
     * @example
     * // Delete one Altrename
     * const Altrename = await prisma.altrename.delete({
     *   where: {
     *     // ... filter to delete one Altrename
     *   }
     * })
     * 
    **/
    delete<T extends AltrenameDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AltrenameDeleteArgs<ExtArgs>>
    ): Prisma__AltrenameClient<$Result.GetResult<Prisma.$AltrenamePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Altrename.
     * @param {AltrenameUpdateArgs} args - Arguments to update one Altrename.
     * @example
     * // Update one Altrename
     * const altrename = await prisma.altrename.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AltrenameUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AltrenameUpdateArgs<ExtArgs>>
    ): Prisma__AltrenameClient<$Result.GetResult<Prisma.$AltrenamePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Altrenames.
     * @param {AltrenameDeleteManyArgs} args - Arguments to filter Altrenames to delete.
     * @example
     * // Delete a few Altrenames
     * const { count } = await prisma.altrename.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AltrenameDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AltrenameDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Altrenames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AltrenameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Altrenames
     * const altrename = await prisma.altrename.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AltrenameUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AltrenameUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Altrename.
     * @param {AltrenameUpsertArgs} args - Arguments to update or create a Altrename.
     * @example
     * // Update or create a Altrename
     * const altrename = await prisma.altrename.upsert({
     *   create: {
     *     // ... data to create a Altrename
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Altrename we want to update
     *   }
     * })
    **/
    upsert<T extends AltrenameUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AltrenameUpsertArgs<ExtArgs>>
    ): Prisma__AltrenameClient<$Result.GetResult<Prisma.$AltrenamePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Altrenames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AltrenameCountArgs} args - Arguments to filter Altrenames to count.
     * @example
     * // Count the number of Altrenames
     * const count = await prisma.altrename.count({
     *   where: {
     *     // ... the filter for the Altrenames we want to count
     *   }
     * })
    **/
    count<T extends AltrenameCountArgs>(
      args?: Subset<T, AltrenameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AltrenameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Altrename.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AltrenameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AltrenameAggregateArgs>(args: Subset<T, AltrenameAggregateArgs>): Prisma.PrismaPromise<GetAltrenameAggregateType<T>>

    /**
     * Group by Altrename.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AltrenameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AltrenameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AltrenameGroupByArgs['orderBy'] }
        : { orderBy?: AltrenameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AltrenameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAltrenameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Altrename model
   */
  readonly fields: AltrenameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Altrename.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AltrenameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Altrename model
   */ 
  interface AltrenameFieldRefs {
    readonly id: FieldRef<"Altrename", 'String'>
    readonly product_vendor: FieldRef<"Altrename", 'Boolean'>
    readonly variant_title: FieldRef<"Altrename", 'Boolean'>
    readonly product_page_title: FieldRef<"Altrename", 'Boolean'>
    readonly product_type: FieldRef<"Altrename", 'Boolean'>
    readonly product_barcode: FieldRef<"Altrename", 'Boolean'>
    readonly product_title: FieldRef<"Altrename", 'Boolean'>
    readonly product_sku: FieldRef<"Altrename", 'Boolean'>
    readonly storename: FieldRef<"Altrename", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Altrename findUnique
   */
  export type AltrenameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Altrename
     */
    select?: AltrenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AltrenameInclude<ExtArgs> | null
    /**
     * Filter, which Altrename to fetch.
     */
    where: AltrenameWhereUniqueInput
  }


  /**
   * Altrename findUniqueOrThrow
   */
  export type AltrenameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Altrename
     */
    select?: AltrenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AltrenameInclude<ExtArgs> | null
    /**
     * Filter, which Altrename to fetch.
     */
    where: AltrenameWhereUniqueInput
  }


  /**
   * Altrename findFirst
   */
  export type AltrenameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Altrename
     */
    select?: AltrenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AltrenameInclude<ExtArgs> | null
    /**
     * Filter, which Altrename to fetch.
     */
    where?: AltrenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Altrenames to fetch.
     */
    orderBy?: AltrenameOrderByWithRelationInput | AltrenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Altrenames.
     */
    cursor?: AltrenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Altrenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Altrenames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Altrenames.
     */
    distinct?: AltrenameScalarFieldEnum | AltrenameScalarFieldEnum[]
  }


  /**
   * Altrename findFirstOrThrow
   */
  export type AltrenameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Altrename
     */
    select?: AltrenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AltrenameInclude<ExtArgs> | null
    /**
     * Filter, which Altrename to fetch.
     */
    where?: AltrenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Altrenames to fetch.
     */
    orderBy?: AltrenameOrderByWithRelationInput | AltrenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Altrenames.
     */
    cursor?: AltrenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Altrenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Altrenames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Altrenames.
     */
    distinct?: AltrenameScalarFieldEnum | AltrenameScalarFieldEnum[]
  }


  /**
   * Altrename findMany
   */
  export type AltrenameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Altrename
     */
    select?: AltrenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AltrenameInclude<ExtArgs> | null
    /**
     * Filter, which Altrenames to fetch.
     */
    where?: AltrenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Altrenames to fetch.
     */
    orderBy?: AltrenameOrderByWithRelationInput | AltrenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Altrenames.
     */
    cursor?: AltrenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Altrenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Altrenames.
     */
    skip?: number
    distinct?: AltrenameScalarFieldEnum | AltrenameScalarFieldEnum[]
  }


  /**
   * Altrename create
   */
  export type AltrenameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Altrename
     */
    select?: AltrenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AltrenameInclude<ExtArgs> | null
    /**
     * The data needed to create a Altrename.
     */
    data: XOR<AltrenameCreateInput, AltrenameUncheckedCreateInput>
  }


  /**
   * Altrename createMany
   */
  export type AltrenameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Altrenames.
     */
    data: AltrenameCreateManyInput | AltrenameCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Altrename update
   */
  export type AltrenameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Altrename
     */
    select?: AltrenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AltrenameInclude<ExtArgs> | null
    /**
     * The data needed to update a Altrename.
     */
    data: XOR<AltrenameUpdateInput, AltrenameUncheckedUpdateInput>
    /**
     * Choose, which Altrename to update.
     */
    where: AltrenameWhereUniqueInput
  }


  /**
   * Altrename updateMany
   */
  export type AltrenameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Altrenames.
     */
    data: XOR<AltrenameUpdateManyMutationInput, AltrenameUncheckedUpdateManyInput>
    /**
     * Filter which Altrenames to update
     */
    where?: AltrenameWhereInput
  }


  /**
   * Altrename upsert
   */
  export type AltrenameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Altrename
     */
    select?: AltrenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AltrenameInclude<ExtArgs> | null
    /**
     * The filter to search for the Altrename to update in case it exists.
     */
    where: AltrenameWhereUniqueInput
    /**
     * In case the Altrename found by the `where` argument doesn't exist, create a new Altrename with this data.
     */
    create: XOR<AltrenameCreateInput, AltrenameUncheckedCreateInput>
    /**
     * In case the Altrename was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AltrenameUpdateInput, AltrenameUncheckedUpdateInput>
  }


  /**
   * Altrename delete
   */
  export type AltrenameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Altrename
     */
    select?: AltrenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AltrenameInclude<ExtArgs> | null
    /**
     * Filter which Altrename to delete.
     */
    where: AltrenameWhereUniqueInput
  }


  /**
   * Altrename deleteMany
   */
  export type AltrenameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Altrenames to delete
     */
    where?: AltrenameWhereInput
  }


  /**
   * Altrename without action
   */
  export type AltrenameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Altrename
     */
    select?: AltrenameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AltrenameInclude<ExtArgs> | null
  }



  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    title: string | null
    product_vendor: string | null
    variant_title: string | null
    product_page_title: string | null
    product_type: string | null
    product_barcode: string | null
    product_title: string | null
    product_sku: string | null
    storename: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    title: string | null
    product_vendor: string | null
    variant_title: string | null
    product_page_title: string | null
    product_type: string | null
    product_barcode: string | null
    product_title: string | null
    product_sku: string | null
    storename: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    title: number
    product_vendor: number
    variant_title: number
    product_page_title: number
    product_type: number
    product_barcode: number
    product_title: number
    product_sku: number
    storename: number
    _all: number
  }


  export type ProductMinAggregateInputType = {
    id?: true
    title?: true
    product_vendor?: true
    variant_title?: true
    product_page_title?: true
    product_type?: true
    product_barcode?: true
    product_title?: true
    product_sku?: true
    storename?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    title?: true
    product_vendor?: true
    variant_title?: true
    product_page_title?: true
    product_type?: true
    product_barcode?: true
    product_title?: true
    product_sku?: true
    storename?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    title?: true
    product_vendor?: true
    variant_title?: true
    product_page_title?: true
    product_type?: true
    product_barcode?: true
    product_title?: true
    product_sku?: true
    storename?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    title: string
    product_vendor: string | null
    variant_title: string | null
    product_page_title: string | null
    product_type: string | null
    product_barcode: string | null
    product_title: string | null
    product_sku: string | null
    storename: string
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    storename?: boolean
    images?: boolean | Product$imagesArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    title?: boolean
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    storename?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | Product$imagesArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      images: Prisma.$ImagePayload<ExtArgs>[]
      store: Prisma.$StorePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      product_vendor: string | null
      variant_title: string | null
      product_page_title: string | null
      product_type: string | null
      product_barcode: string | null
      product_title: string | null
      product_sku: string | null
      storename: string
    }, ExtArgs["result"]["product"]>
    composites: {}
  }


  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    images<T extends Product$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Product$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findMany'> | Null>;

    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly title: FieldRef<"Product", 'String'>
    readonly product_vendor: FieldRef<"Product", 'String'>
    readonly variant_title: FieldRef<"Product", 'String'>
    readonly product_page_title: FieldRef<"Product", 'String'>
    readonly product_type: FieldRef<"Product", 'String'>
    readonly product_barcode: FieldRef<"Product", 'String'>
    readonly product_title: FieldRef<"Product", 'String'>
    readonly product_sku: FieldRef<"Product", 'String'>
    readonly storename: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }


  /**
   * Product.images
   */
  export type Product$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    cursor?: ImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }


  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
  }



  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageMinAggregateOutputType = {
    id: string | null
    url: string | null
    name: string | null
    alt: string | null
    productId: string | null
    status: $Enums.Status | null
    fileRename: boolean | null
    altRename: boolean | null
  }

  export type ImageMaxAggregateOutputType = {
    id: string | null
    url: string | null
    name: string | null
    alt: string | null
    productId: string | null
    status: $Enums.Status | null
    fileRename: boolean | null
    altRename: boolean | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    url: number
    name: number
    alt: number
    productId: number
    status: number
    fileRename: number
    altRename: number
    _all: number
  }


  export type ImageMinAggregateInputType = {
    id?: true
    url?: true
    name?: true
    alt?: true
    productId?: true
    status?: true
    fileRename?: true
    altRename?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    url?: true
    name?: true
    alt?: true
    productId?: true
    status?: true
    fileRename?: true
    altRename?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    url?: true
    name?: true
    alt?: true
    productId?: true
    status?: true
    fileRename?: true
    altRename?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: string
    url: string
    name: string | null
    alt: string | null
    productId: string
    status: $Enums.Status | null
    fileRename: boolean | null
    altRename: boolean | null
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    name?: boolean
    alt?: boolean
    productId?: boolean
    status?: boolean
    fileRename?: boolean
    altRename?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    url?: boolean
    name?: boolean
    alt?: boolean
    productId?: boolean
    status?: boolean
    fileRename?: boolean
    altRename?: boolean
  }

  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }


  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      name: string | null
      alt: string | null
      productId: string
      status: $Enums.Status | null
      fileRename: boolean | null
      altRename: boolean | null
    }, ExtArgs["result"]["image"]>
    composites: {}
  }


  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Image that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
    **/
    create<T extends ImageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ImageCreateArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Images.
     *     @param {ImageCreateManyArgs} args - Arguments to create many Images.
     *     @example
     *     // Create many Images
     *     const image = await prisma.image.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ImageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
    **/
    delete<T extends ImageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
    **/
    upsert<T extends ImageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Image model
   */ 
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'String'>
    readonly url: FieldRef<"Image", 'String'>
    readonly name: FieldRef<"Image", 'String'>
    readonly alt: FieldRef<"Image", 'String'>
    readonly productId: FieldRef<"Image", 'String'>
    readonly status: FieldRef<"Image", 'Status'>
    readonly fileRename: FieldRef<"Image", 'Boolean'>
    readonly altRename: FieldRef<"Image", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }


  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }


  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }


  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }


  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }


  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }


  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }


  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
  }


  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }


  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }


  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
  }


  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
  }



  /**
   * Model Backupimage
   */

  export type AggregateBackupimage = {
    _count: BackupimageCountAggregateOutputType | null
    _min: BackupimageMinAggregateOutputType | null
    _max: BackupimageMaxAggregateOutputType | null
  }

  export type BackupimageMinAggregateOutputType = {
    restoreId: string | null
    url: string | null
  }

  export type BackupimageMaxAggregateOutputType = {
    restoreId: string | null
    url: string | null
  }

  export type BackupimageCountAggregateOutputType = {
    restoreId: number
    url: number
    _all: number
  }


  export type BackupimageMinAggregateInputType = {
    restoreId?: true
    url?: true
  }

  export type BackupimageMaxAggregateInputType = {
    restoreId?: true
    url?: true
  }

  export type BackupimageCountAggregateInputType = {
    restoreId?: true
    url?: true
    _all?: true
  }

  export type BackupimageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Backupimage to aggregate.
     */
    where?: BackupimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupimages to fetch.
     */
    orderBy?: BackupimageOrderByWithRelationInput | BackupimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BackupimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Backupimages
    **/
    _count?: true | BackupimageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BackupimageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BackupimageMaxAggregateInputType
  }

  export type GetBackupimageAggregateType<T extends BackupimageAggregateArgs> = {
        [P in keyof T & keyof AggregateBackupimage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBackupimage[P]>
      : GetScalarType<T[P], AggregateBackupimage[P]>
  }




  export type BackupimageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BackupimageWhereInput
    orderBy?: BackupimageOrderByWithAggregationInput | BackupimageOrderByWithAggregationInput[]
    by: BackupimageScalarFieldEnum[] | BackupimageScalarFieldEnum
    having?: BackupimageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BackupimageCountAggregateInputType | true
    _min?: BackupimageMinAggregateInputType
    _max?: BackupimageMaxAggregateInputType
  }

  export type BackupimageGroupByOutputType = {
    restoreId: string
    url: string
    _count: BackupimageCountAggregateOutputType | null
    _min: BackupimageMinAggregateOutputType | null
    _max: BackupimageMaxAggregateOutputType | null
  }

  type GetBackupimageGroupByPayload<T extends BackupimageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BackupimageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BackupimageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BackupimageGroupByOutputType[P]>
            : GetScalarType<T[P], BackupimageGroupByOutputType[P]>
        }
      >
    >


  export type BackupimageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    restoreId?: boolean
    url?: boolean
  }, ExtArgs["result"]["backupimage"]>

  export type BackupimageSelectScalar = {
    restoreId?: boolean
    url?: boolean
  }


  export type $BackupimagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Backupimage"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      restoreId: string
      url: string
    }, ExtArgs["result"]["backupimage"]>
    composites: {}
  }


  type BackupimageGetPayload<S extends boolean | null | undefined | BackupimageDefaultArgs> = $Result.GetResult<Prisma.$BackupimagePayload, S>

  type BackupimageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BackupimageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BackupimageCountAggregateInputType | true
    }

  export interface BackupimageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Backupimage'], meta: { name: 'Backupimage' } }
    /**
     * Find zero or one Backupimage that matches the filter.
     * @param {BackupimageFindUniqueArgs} args - Arguments to find a Backupimage
     * @example
     * // Get one Backupimage
     * const backupimage = await prisma.backupimage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BackupimageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BackupimageFindUniqueArgs<ExtArgs>>
    ): Prisma__BackupimageClient<$Result.GetResult<Prisma.$BackupimagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Backupimage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BackupimageFindUniqueOrThrowArgs} args - Arguments to find a Backupimage
     * @example
     * // Get one Backupimage
     * const backupimage = await prisma.backupimage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BackupimageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupimageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BackupimageClient<$Result.GetResult<Prisma.$BackupimagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Backupimage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupimageFindFirstArgs} args - Arguments to find a Backupimage
     * @example
     * // Get one Backupimage
     * const backupimage = await prisma.backupimage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BackupimageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupimageFindFirstArgs<ExtArgs>>
    ): Prisma__BackupimageClient<$Result.GetResult<Prisma.$BackupimagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Backupimage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupimageFindFirstOrThrowArgs} args - Arguments to find a Backupimage
     * @example
     * // Get one Backupimage
     * const backupimage = await prisma.backupimage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BackupimageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupimageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BackupimageClient<$Result.GetResult<Prisma.$BackupimagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Backupimages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupimageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Backupimages
     * const backupimages = await prisma.backupimage.findMany()
     * 
     * // Get first 10 Backupimages
     * const backupimages = await prisma.backupimage.findMany({ take: 10 })
     * 
     * // Only select the `restoreId`
     * const backupimageWithRestoreIdOnly = await prisma.backupimage.findMany({ select: { restoreId: true } })
     * 
    **/
    findMany<T extends BackupimageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupimageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BackupimagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Backupimage.
     * @param {BackupimageCreateArgs} args - Arguments to create a Backupimage.
     * @example
     * // Create one Backupimage
     * const Backupimage = await prisma.backupimage.create({
     *   data: {
     *     // ... data to create a Backupimage
     *   }
     * })
     * 
    **/
    create<T extends BackupimageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BackupimageCreateArgs<ExtArgs>>
    ): Prisma__BackupimageClient<$Result.GetResult<Prisma.$BackupimagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Backupimages.
     *     @param {BackupimageCreateManyArgs} args - Arguments to create many Backupimages.
     *     @example
     *     // Create many Backupimages
     *     const backupimage = await prisma.backupimage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BackupimageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupimageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Backupimage.
     * @param {BackupimageDeleteArgs} args - Arguments to delete one Backupimage.
     * @example
     * // Delete one Backupimage
     * const Backupimage = await prisma.backupimage.delete({
     *   where: {
     *     // ... filter to delete one Backupimage
     *   }
     * })
     * 
    **/
    delete<T extends BackupimageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BackupimageDeleteArgs<ExtArgs>>
    ): Prisma__BackupimageClient<$Result.GetResult<Prisma.$BackupimagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Backupimage.
     * @param {BackupimageUpdateArgs} args - Arguments to update one Backupimage.
     * @example
     * // Update one Backupimage
     * const backupimage = await prisma.backupimage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BackupimageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BackupimageUpdateArgs<ExtArgs>>
    ): Prisma__BackupimageClient<$Result.GetResult<Prisma.$BackupimagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Backupimages.
     * @param {BackupimageDeleteManyArgs} args - Arguments to filter Backupimages to delete.
     * @example
     * // Delete a few Backupimages
     * const { count } = await prisma.backupimage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BackupimageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupimageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Backupimages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupimageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Backupimages
     * const backupimage = await prisma.backupimage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BackupimageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BackupimageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Backupimage.
     * @param {BackupimageUpsertArgs} args - Arguments to update or create a Backupimage.
     * @example
     * // Update or create a Backupimage
     * const backupimage = await prisma.backupimage.upsert({
     *   create: {
     *     // ... data to create a Backupimage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Backupimage we want to update
     *   }
     * })
    **/
    upsert<T extends BackupimageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BackupimageUpsertArgs<ExtArgs>>
    ): Prisma__BackupimageClient<$Result.GetResult<Prisma.$BackupimagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Backupimages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupimageCountArgs} args - Arguments to filter Backupimages to count.
     * @example
     * // Count the number of Backupimages
     * const count = await prisma.backupimage.count({
     *   where: {
     *     // ... the filter for the Backupimages we want to count
     *   }
     * })
    **/
    count<T extends BackupimageCountArgs>(
      args?: Subset<T, BackupimageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BackupimageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Backupimage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupimageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BackupimageAggregateArgs>(args: Subset<T, BackupimageAggregateArgs>): Prisma.PrismaPromise<GetBackupimageAggregateType<T>>

    /**
     * Group by Backupimage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupimageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BackupimageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BackupimageGroupByArgs['orderBy'] }
        : { orderBy?: BackupimageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BackupimageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBackupimageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Backupimage model
   */
  readonly fields: BackupimageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Backupimage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BackupimageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Backupimage model
   */ 
  interface BackupimageFieldRefs {
    readonly restoreId: FieldRef<"Backupimage", 'String'>
    readonly url: FieldRef<"Backupimage", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Backupimage findUnique
   */
  export type BackupimageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupimage
     */
    select?: BackupimageSelect<ExtArgs> | null
    /**
     * Filter, which Backupimage to fetch.
     */
    where: BackupimageWhereUniqueInput
  }


  /**
   * Backupimage findUniqueOrThrow
   */
  export type BackupimageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupimage
     */
    select?: BackupimageSelect<ExtArgs> | null
    /**
     * Filter, which Backupimage to fetch.
     */
    where: BackupimageWhereUniqueInput
  }


  /**
   * Backupimage findFirst
   */
  export type BackupimageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupimage
     */
    select?: BackupimageSelect<ExtArgs> | null
    /**
     * Filter, which Backupimage to fetch.
     */
    where?: BackupimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupimages to fetch.
     */
    orderBy?: BackupimageOrderByWithRelationInput | BackupimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Backupimages.
     */
    cursor?: BackupimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Backupimages.
     */
    distinct?: BackupimageScalarFieldEnum | BackupimageScalarFieldEnum[]
  }


  /**
   * Backupimage findFirstOrThrow
   */
  export type BackupimageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupimage
     */
    select?: BackupimageSelect<ExtArgs> | null
    /**
     * Filter, which Backupimage to fetch.
     */
    where?: BackupimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupimages to fetch.
     */
    orderBy?: BackupimageOrderByWithRelationInput | BackupimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Backupimages.
     */
    cursor?: BackupimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Backupimages.
     */
    distinct?: BackupimageScalarFieldEnum | BackupimageScalarFieldEnum[]
  }


  /**
   * Backupimage findMany
   */
  export type BackupimageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupimage
     */
    select?: BackupimageSelect<ExtArgs> | null
    /**
     * Filter, which Backupimages to fetch.
     */
    where?: BackupimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupimages to fetch.
     */
    orderBy?: BackupimageOrderByWithRelationInput | BackupimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Backupimages.
     */
    cursor?: BackupimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupimages.
     */
    skip?: number
    distinct?: BackupimageScalarFieldEnum | BackupimageScalarFieldEnum[]
  }


  /**
   * Backupimage create
   */
  export type BackupimageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupimage
     */
    select?: BackupimageSelect<ExtArgs> | null
    /**
     * The data needed to create a Backupimage.
     */
    data: XOR<BackupimageCreateInput, BackupimageUncheckedCreateInput>
  }


  /**
   * Backupimage createMany
   */
  export type BackupimageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Backupimages.
     */
    data: BackupimageCreateManyInput | BackupimageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Backupimage update
   */
  export type BackupimageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupimage
     */
    select?: BackupimageSelect<ExtArgs> | null
    /**
     * The data needed to update a Backupimage.
     */
    data: XOR<BackupimageUpdateInput, BackupimageUncheckedUpdateInput>
    /**
     * Choose, which Backupimage to update.
     */
    where: BackupimageWhereUniqueInput
  }


  /**
   * Backupimage updateMany
   */
  export type BackupimageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Backupimages.
     */
    data: XOR<BackupimageUpdateManyMutationInput, BackupimageUncheckedUpdateManyInput>
    /**
     * Filter which Backupimages to update
     */
    where?: BackupimageWhereInput
  }


  /**
   * Backupimage upsert
   */
  export type BackupimageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupimage
     */
    select?: BackupimageSelect<ExtArgs> | null
    /**
     * The filter to search for the Backupimage to update in case it exists.
     */
    where: BackupimageWhereUniqueInput
    /**
     * In case the Backupimage found by the `where` argument doesn't exist, create a new Backupimage with this data.
     */
    create: XOR<BackupimageCreateInput, BackupimageUncheckedCreateInput>
    /**
     * In case the Backupimage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BackupimageUpdateInput, BackupimageUncheckedUpdateInput>
  }


  /**
   * Backupimage delete
   */
  export type BackupimageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupimage
     */
    select?: BackupimageSelect<ExtArgs> | null
    /**
     * Filter which Backupimage to delete.
     */
    where: BackupimageWhereUniqueInput
  }


  /**
   * Backupimage deleteMany
   */
  export type BackupimageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Backupimages to delete
     */
    where?: BackupimageWhereInput
  }


  /**
   * Backupimage without action
   */
  export type BackupimageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupimage
     */
    select?: BackupimageSelect<ExtArgs> | null
  }



  /**
   * Model Backupfilename
   */

  export type AggregateBackupfilename = {
    _count: BackupfilenameCountAggregateOutputType | null
    _min: BackupfilenameMinAggregateOutputType | null
    _max: BackupfilenameMaxAggregateOutputType | null
  }

  export type BackupfilenameMinAggregateOutputType = {
    restoreId: string | null
    name: string | null
  }

  export type BackupfilenameMaxAggregateOutputType = {
    restoreId: string | null
    name: string | null
  }

  export type BackupfilenameCountAggregateOutputType = {
    restoreId: number
    name: number
    _all: number
  }


  export type BackupfilenameMinAggregateInputType = {
    restoreId?: true
    name?: true
  }

  export type BackupfilenameMaxAggregateInputType = {
    restoreId?: true
    name?: true
  }

  export type BackupfilenameCountAggregateInputType = {
    restoreId?: true
    name?: true
    _all?: true
  }

  export type BackupfilenameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Backupfilename to aggregate.
     */
    where?: BackupfilenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupfilenames to fetch.
     */
    orderBy?: BackupfilenameOrderByWithRelationInput | BackupfilenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BackupfilenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupfilenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupfilenames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Backupfilenames
    **/
    _count?: true | BackupfilenameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BackupfilenameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BackupfilenameMaxAggregateInputType
  }

  export type GetBackupfilenameAggregateType<T extends BackupfilenameAggregateArgs> = {
        [P in keyof T & keyof AggregateBackupfilename]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBackupfilename[P]>
      : GetScalarType<T[P], AggregateBackupfilename[P]>
  }




  export type BackupfilenameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BackupfilenameWhereInput
    orderBy?: BackupfilenameOrderByWithAggregationInput | BackupfilenameOrderByWithAggregationInput[]
    by: BackupfilenameScalarFieldEnum[] | BackupfilenameScalarFieldEnum
    having?: BackupfilenameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BackupfilenameCountAggregateInputType | true
    _min?: BackupfilenameMinAggregateInputType
    _max?: BackupfilenameMaxAggregateInputType
  }

  export type BackupfilenameGroupByOutputType = {
    restoreId: string
    name: string
    _count: BackupfilenameCountAggregateOutputType | null
    _min: BackupfilenameMinAggregateOutputType | null
    _max: BackupfilenameMaxAggregateOutputType | null
  }

  type GetBackupfilenameGroupByPayload<T extends BackupfilenameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BackupfilenameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BackupfilenameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BackupfilenameGroupByOutputType[P]>
            : GetScalarType<T[P], BackupfilenameGroupByOutputType[P]>
        }
      >
    >


  export type BackupfilenameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    restoreId?: boolean
    name?: boolean
  }, ExtArgs["result"]["backupfilename"]>

  export type BackupfilenameSelectScalar = {
    restoreId?: boolean
    name?: boolean
  }


  export type $BackupfilenamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Backupfilename"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      restoreId: string
      name: string
    }, ExtArgs["result"]["backupfilename"]>
    composites: {}
  }


  type BackupfilenameGetPayload<S extends boolean | null | undefined | BackupfilenameDefaultArgs> = $Result.GetResult<Prisma.$BackupfilenamePayload, S>

  type BackupfilenameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BackupfilenameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BackupfilenameCountAggregateInputType | true
    }

  export interface BackupfilenameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Backupfilename'], meta: { name: 'Backupfilename' } }
    /**
     * Find zero or one Backupfilename that matches the filter.
     * @param {BackupfilenameFindUniqueArgs} args - Arguments to find a Backupfilename
     * @example
     * // Get one Backupfilename
     * const backupfilename = await prisma.backupfilename.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BackupfilenameFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BackupfilenameFindUniqueArgs<ExtArgs>>
    ): Prisma__BackupfilenameClient<$Result.GetResult<Prisma.$BackupfilenamePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Backupfilename that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BackupfilenameFindUniqueOrThrowArgs} args - Arguments to find a Backupfilename
     * @example
     * // Get one Backupfilename
     * const backupfilename = await prisma.backupfilename.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BackupfilenameFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupfilenameFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BackupfilenameClient<$Result.GetResult<Prisma.$BackupfilenamePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Backupfilename that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupfilenameFindFirstArgs} args - Arguments to find a Backupfilename
     * @example
     * // Get one Backupfilename
     * const backupfilename = await prisma.backupfilename.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BackupfilenameFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupfilenameFindFirstArgs<ExtArgs>>
    ): Prisma__BackupfilenameClient<$Result.GetResult<Prisma.$BackupfilenamePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Backupfilename that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupfilenameFindFirstOrThrowArgs} args - Arguments to find a Backupfilename
     * @example
     * // Get one Backupfilename
     * const backupfilename = await prisma.backupfilename.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BackupfilenameFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupfilenameFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BackupfilenameClient<$Result.GetResult<Prisma.$BackupfilenamePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Backupfilenames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupfilenameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Backupfilenames
     * const backupfilenames = await prisma.backupfilename.findMany()
     * 
     * // Get first 10 Backupfilenames
     * const backupfilenames = await prisma.backupfilename.findMany({ take: 10 })
     * 
     * // Only select the `restoreId`
     * const backupfilenameWithRestoreIdOnly = await prisma.backupfilename.findMany({ select: { restoreId: true } })
     * 
    **/
    findMany<T extends BackupfilenameFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupfilenameFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BackupfilenamePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Backupfilename.
     * @param {BackupfilenameCreateArgs} args - Arguments to create a Backupfilename.
     * @example
     * // Create one Backupfilename
     * const Backupfilename = await prisma.backupfilename.create({
     *   data: {
     *     // ... data to create a Backupfilename
     *   }
     * })
     * 
    **/
    create<T extends BackupfilenameCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BackupfilenameCreateArgs<ExtArgs>>
    ): Prisma__BackupfilenameClient<$Result.GetResult<Prisma.$BackupfilenamePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Backupfilenames.
     *     @param {BackupfilenameCreateManyArgs} args - Arguments to create many Backupfilenames.
     *     @example
     *     // Create many Backupfilenames
     *     const backupfilename = await prisma.backupfilename.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BackupfilenameCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupfilenameCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Backupfilename.
     * @param {BackupfilenameDeleteArgs} args - Arguments to delete one Backupfilename.
     * @example
     * // Delete one Backupfilename
     * const Backupfilename = await prisma.backupfilename.delete({
     *   where: {
     *     // ... filter to delete one Backupfilename
     *   }
     * })
     * 
    **/
    delete<T extends BackupfilenameDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BackupfilenameDeleteArgs<ExtArgs>>
    ): Prisma__BackupfilenameClient<$Result.GetResult<Prisma.$BackupfilenamePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Backupfilename.
     * @param {BackupfilenameUpdateArgs} args - Arguments to update one Backupfilename.
     * @example
     * // Update one Backupfilename
     * const backupfilename = await prisma.backupfilename.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BackupfilenameUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BackupfilenameUpdateArgs<ExtArgs>>
    ): Prisma__BackupfilenameClient<$Result.GetResult<Prisma.$BackupfilenamePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Backupfilenames.
     * @param {BackupfilenameDeleteManyArgs} args - Arguments to filter Backupfilenames to delete.
     * @example
     * // Delete a few Backupfilenames
     * const { count } = await prisma.backupfilename.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BackupfilenameDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupfilenameDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Backupfilenames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupfilenameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Backupfilenames
     * const backupfilename = await prisma.backupfilename.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BackupfilenameUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BackupfilenameUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Backupfilename.
     * @param {BackupfilenameUpsertArgs} args - Arguments to update or create a Backupfilename.
     * @example
     * // Update or create a Backupfilename
     * const backupfilename = await prisma.backupfilename.upsert({
     *   create: {
     *     // ... data to create a Backupfilename
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Backupfilename we want to update
     *   }
     * })
    **/
    upsert<T extends BackupfilenameUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BackupfilenameUpsertArgs<ExtArgs>>
    ): Prisma__BackupfilenameClient<$Result.GetResult<Prisma.$BackupfilenamePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Backupfilenames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupfilenameCountArgs} args - Arguments to filter Backupfilenames to count.
     * @example
     * // Count the number of Backupfilenames
     * const count = await prisma.backupfilename.count({
     *   where: {
     *     // ... the filter for the Backupfilenames we want to count
     *   }
     * })
    **/
    count<T extends BackupfilenameCountArgs>(
      args?: Subset<T, BackupfilenameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BackupfilenameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Backupfilename.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupfilenameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BackupfilenameAggregateArgs>(args: Subset<T, BackupfilenameAggregateArgs>): Prisma.PrismaPromise<GetBackupfilenameAggregateType<T>>

    /**
     * Group by Backupfilename.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupfilenameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BackupfilenameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BackupfilenameGroupByArgs['orderBy'] }
        : { orderBy?: BackupfilenameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BackupfilenameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBackupfilenameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Backupfilename model
   */
  readonly fields: BackupfilenameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Backupfilename.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BackupfilenameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Backupfilename model
   */ 
  interface BackupfilenameFieldRefs {
    readonly restoreId: FieldRef<"Backupfilename", 'String'>
    readonly name: FieldRef<"Backupfilename", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Backupfilename findUnique
   */
  export type BackupfilenameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupfilename
     */
    select?: BackupfilenameSelect<ExtArgs> | null
    /**
     * Filter, which Backupfilename to fetch.
     */
    where: BackupfilenameWhereUniqueInput
  }


  /**
   * Backupfilename findUniqueOrThrow
   */
  export type BackupfilenameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupfilename
     */
    select?: BackupfilenameSelect<ExtArgs> | null
    /**
     * Filter, which Backupfilename to fetch.
     */
    where: BackupfilenameWhereUniqueInput
  }


  /**
   * Backupfilename findFirst
   */
  export type BackupfilenameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupfilename
     */
    select?: BackupfilenameSelect<ExtArgs> | null
    /**
     * Filter, which Backupfilename to fetch.
     */
    where?: BackupfilenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupfilenames to fetch.
     */
    orderBy?: BackupfilenameOrderByWithRelationInput | BackupfilenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Backupfilenames.
     */
    cursor?: BackupfilenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupfilenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupfilenames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Backupfilenames.
     */
    distinct?: BackupfilenameScalarFieldEnum | BackupfilenameScalarFieldEnum[]
  }


  /**
   * Backupfilename findFirstOrThrow
   */
  export type BackupfilenameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupfilename
     */
    select?: BackupfilenameSelect<ExtArgs> | null
    /**
     * Filter, which Backupfilename to fetch.
     */
    where?: BackupfilenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupfilenames to fetch.
     */
    orderBy?: BackupfilenameOrderByWithRelationInput | BackupfilenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Backupfilenames.
     */
    cursor?: BackupfilenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupfilenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupfilenames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Backupfilenames.
     */
    distinct?: BackupfilenameScalarFieldEnum | BackupfilenameScalarFieldEnum[]
  }


  /**
   * Backupfilename findMany
   */
  export type BackupfilenameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupfilename
     */
    select?: BackupfilenameSelect<ExtArgs> | null
    /**
     * Filter, which Backupfilenames to fetch.
     */
    where?: BackupfilenameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupfilenames to fetch.
     */
    orderBy?: BackupfilenameOrderByWithRelationInput | BackupfilenameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Backupfilenames.
     */
    cursor?: BackupfilenameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupfilenames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupfilenames.
     */
    skip?: number
    distinct?: BackupfilenameScalarFieldEnum | BackupfilenameScalarFieldEnum[]
  }


  /**
   * Backupfilename create
   */
  export type BackupfilenameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupfilename
     */
    select?: BackupfilenameSelect<ExtArgs> | null
    /**
     * The data needed to create a Backupfilename.
     */
    data: XOR<BackupfilenameCreateInput, BackupfilenameUncheckedCreateInput>
  }


  /**
   * Backupfilename createMany
   */
  export type BackupfilenameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Backupfilenames.
     */
    data: BackupfilenameCreateManyInput | BackupfilenameCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Backupfilename update
   */
  export type BackupfilenameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupfilename
     */
    select?: BackupfilenameSelect<ExtArgs> | null
    /**
     * The data needed to update a Backupfilename.
     */
    data: XOR<BackupfilenameUpdateInput, BackupfilenameUncheckedUpdateInput>
    /**
     * Choose, which Backupfilename to update.
     */
    where: BackupfilenameWhereUniqueInput
  }


  /**
   * Backupfilename updateMany
   */
  export type BackupfilenameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Backupfilenames.
     */
    data: XOR<BackupfilenameUpdateManyMutationInput, BackupfilenameUncheckedUpdateManyInput>
    /**
     * Filter which Backupfilenames to update
     */
    where?: BackupfilenameWhereInput
  }


  /**
   * Backupfilename upsert
   */
  export type BackupfilenameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupfilename
     */
    select?: BackupfilenameSelect<ExtArgs> | null
    /**
     * The filter to search for the Backupfilename to update in case it exists.
     */
    where: BackupfilenameWhereUniqueInput
    /**
     * In case the Backupfilename found by the `where` argument doesn't exist, create a new Backupfilename with this data.
     */
    create: XOR<BackupfilenameCreateInput, BackupfilenameUncheckedCreateInput>
    /**
     * In case the Backupfilename was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BackupfilenameUpdateInput, BackupfilenameUncheckedUpdateInput>
  }


  /**
   * Backupfilename delete
   */
  export type BackupfilenameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupfilename
     */
    select?: BackupfilenameSelect<ExtArgs> | null
    /**
     * Filter which Backupfilename to delete.
     */
    where: BackupfilenameWhereUniqueInput
  }


  /**
   * Backupfilename deleteMany
   */
  export type BackupfilenameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Backupfilenames to delete
     */
    where?: BackupfilenameWhereInput
  }


  /**
   * Backupfilename without action
   */
  export type BackupfilenameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupfilename
     */
    select?: BackupfilenameSelect<ExtArgs> | null
  }



  /**
   * Model Backupaltname
   */

  export type AggregateBackupaltname = {
    _count: BackupaltnameCountAggregateOutputType | null
    _min: BackupaltnameMinAggregateOutputType | null
    _max: BackupaltnameMaxAggregateOutputType | null
  }

  export type BackupaltnameMinAggregateOutputType = {
    restoreId: string | null
    alt: string | null
  }

  export type BackupaltnameMaxAggregateOutputType = {
    restoreId: string | null
    alt: string | null
  }

  export type BackupaltnameCountAggregateOutputType = {
    restoreId: number
    alt: number
    _all: number
  }


  export type BackupaltnameMinAggregateInputType = {
    restoreId?: true
    alt?: true
  }

  export type BackupaltnameMaxAggregateInputType = {
    restoreId?: true
    alt?: true
  }

  export type BackupaltnameCountAggregateInputType = {
    restoreId?: true
    alt?: true
    _all?: true
  }

  export type BackupaltnameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Backupaltname to aggregate.
     */
    where?: BackupaltnameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupaltnames to fetch.
     */
    orderBy?: BackupaltnameOrderByWithRelationInput | BackupaltnameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BackupaltnameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupaltnames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupaltnames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Backupaltnames
    **/
    _count?: true | BackupaltnameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BackupaltnameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BackupaltnameMaxAggregateInputType
  }

  export type GetBackupaltnameAggregateType<T extends BackupaltnameAggregateArgs> = {
        [P in keyof T & keyof AggregateBackupaltname]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBackupaltname[P]>
      : GetScalarType<T[P], AggregateBackupaltname[P]>
  }




  export type BackupaltnameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BackupaltnameWhereInput
    orderBy?: BackupaltnameOrderByWithAggregationInput | BackupaltnameOrderByWithAggregationInput[]
    by: BackupaltnameScalarFieldEnum[] | BackupaltnameScalarFieldEnum
    having?: BackupaltnameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BackupaltnameCountAggregateInputType | true
    _min?: BackupaltnameMinAggregateInputType
    _max?: BackupaltnameMaxAggregateInputType
  }

  export type BackupaltnameGroupByOutputType = {
    restoreId: string
    alt: string
    _count: BackupaltnameCountAggregateOutputType | null
    _min: BackupaltnameMinAggregateOutputType | null
    _max: BackupaltnameMaxAggregateOutputType | null
  }

  type GetBackupaltnameGroupByPayload<T extends BackupaltnameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BackupaltnameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BackupaltnameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BackupaltnameGroupByOutputType[P]>
            : GetScalarType<T[P], BackupaltnameGroupByOutputType[P]>
        }
      >
    >


  export type BackupaltnameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    restoreId?: boolean
    alt?: boolean
  }, ExtArgs["result"]["backupaltname"]>

  export type BackupaltnameSelectScalar = {
    restoreId?: boolean
    alt?: boolean
  }


  export type $BackupaltnamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Backupaltname"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      restoreId: string
      alt: string
    }, ExtArgs["result"]["backupaltname"]>
    composites: {}
  }


  type BackupaltnameGetPayload<S extends boolean | null | undefined | BackupaltnameDefaultArgs> = $Result.GetResult<Prisma.$BackupaltnamePayload, S>

  type BackupaltnameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BackupaltnameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BackupaltnameCountAggregateInputType | true
    }

  export interface BackupaltnameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Backupaltname'], meta: { name: 'Backupaltname' } }
    /**
     * Find zero or one Backupaltname that matches the filter.
     * @param {BackupaltnameFindUniqueArgs} args - Arguments to find a Backupaltname
     * @example
     * // Get one Backupaltname
     * const backupaltname = await prisma.backupaltname.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BackupaltnameFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BackupaltnameFindUniqueArgs<ExtArgs>>
    ): Prisma__BackupaltnameClient<$Result.GetResult<Prisma.$BackupaltnamePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Backupaltname that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BackupaltnameFindUniqueOrThrowArgs} args - Arguments to find a Backupaltname
     * @example
     * // Get one Backupaltname
     * const backupaltname = await prisma.backupaltname.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BackupaltnameFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupaltnameFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BackupaltnameClient<$Result.GetResult<Prisma.$BackupaltnamePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Backupaltname that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupaltnameFindFirstArgs} args - Arguments to find a Backupaltname
     * @example
     * // Get one Backupaltname
     * const backupaltname = await prisma.backupaltname.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BackupaltnameFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupaltnameFindFirstArgs<ExtArgs>>
    ): Prisma__BackupaltnameClient<$Result.GetResult<Prisma.$BackupaltnamePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Backupaltname that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupaltnameFindFirstOrThrowArgs} args - Arguments to find a Backupaltname
     * @example
     * // Get one Backupaltname
     * const backupaltname = await prisma.backupaltname.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BackupaltnameFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupaltnameFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BackupaltnameClient<$Result.GetResult<Prisma.$BackupaltnamePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Backupaltnames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupaltnameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Backupaltnames
     * const backupaltnames = await prisma.backupaltname.findMany()
     * 
     * // Get first 10 Backupaltnames
     * const backupaltnames = await prisma.backupaltname.findMany({ take: 10 })
     * 
     * // Only select the `restoreId`
     * const backupaltnameWithRestoreIdOnly = await prisma.backupaltname.findMany({ select: { restoreId: true } })
     * 
    **/
    findMany<T extends BackupaltnameFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupaltnameFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BackupaltnamePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Backupaltname.
     * @param {BackupaltnameCreateArgs} args - Arguments to create a Backupaltname.
     * @example
     * // Create one Backupaltname
     * const Backupaltname = await prisma.backupaltname.create({
     *   data: {
     *     // ... data to create a Backupaltname
     *   }
     * })
     * 
    **/
    create<T extends BackupaltnameCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BackupaltnameCreateArgs<ExtArgs>>
    ): Prisma__BackupaltnameClient<$Result.GetResult<Prisma.$BackupaltnamePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Backupaltnames.
     *     @param {BackupaltnameCreateManyArgs} args - Arguments to create many Backupaltnames.
     *     @example
     *     // Create many Backupaltnames
     *     const backupaltname = await prisma.backupaltname.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BackupaltnameCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupaltnameCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Backupaltname.
     * @param {BackupaltnameDeleteArgs} args - Arguments to delete one Backupaltname.
     * @example
     * // Delete one Backupaltname
     * const Backupaltname = await prisma.backupaltname.delete({
     *   where: {
     *     // ... filter to delete one Backupaltname
     *   }
     * })
     * 
    **/
    delete<T extends BackupaltnameDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BackupaltnameDeleteArgs<ExtArgs>>
    ): Prisma__BackupaltnameClient<$Result.GetResult<Prisma.$BackupaltnamePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Backupaltname.
     * @param {BackupaltnameUpdateArgs} args - Arguments to update one Backupaltname.
     * @example
     * // Update one Backupaltname
     * const backupaltname = await prisma.backupaltname.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BackupaltnameUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BackupaltnameUpdateArgs<ExtArgs>>
    ): Prisma__BackupaltnameClient<$Result.GetResult<Prisma.$BackupaltnamePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Backupaltnames.
     * @param {BackupaltnameDeleteManyArgs} args - Arguments to filter Backupaltnames to delete.
     * @example
     * // Delete a few Backupaltnames
     * const { count } = await prisma.backupaltname.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BackupaltnameDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BackupaltnameDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Backupaltnames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupaltnameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Backupaltnames
     * const backupaltname = await prisma.backupaltname.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BackupaltnameUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BackupaltnameUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Backupaltname.
     * @param {BackupaltnameUpsertArgs} args - Arguments to update or create a Backupaltname.
     * @example
     * // Update or create a Backupaltname
     * const backupaltname = await prisma.backupaltname.upsert({
     *   create: {
     *     // ... data to create a Backupaltname
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Backupaltname we want to update
     *   }
     * })
    **/
    upsert<T extends BackupaltnameUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BackupaltnameUpsertArgs<ExtArgs>>
    ): Prisma__BackupaltnameClient<$Result.GetResult<Prisma.$BackupaltnamePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Backupaltnames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupaltnameCountArgs} args - Arguments to filter Backupaltnames to count.
     * @example
     * // Count the number of Backupaltnames
     * const count = await prisma.backupaltname.count({
     *   where: {
     *     // ... the filter for the Backupaltnames we want to count
     *   }
     * })
    **/
    count<T extends BackupaltnameCountArgs>(
      args?: Subset<T, BackupaltnameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BackupaltnameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Backupaltname.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupaltnameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BackupaltnameAggregateArgs>(args: Subset<T, BackupaltnameAggregateArgs>): Prisma.PrismaPromise<GetBackupaltnameAggregateType<T>>

    /**
     * Group by Backupaltname.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackupaltnameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BackupaltnameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BackupaltnameGroupByArgs['orderBy'] }
        : { orderBy?: BackupaltnameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BackupaltnameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBackupaltnameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Backupaltname model
   */
  readonly fields: BackupaltnameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Backupaltname.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BackupaltnameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Backupaltname model
   */ 
  interface BackupaltnameFieldRefs {
    readonly restoreId: FieldRef<"Backupaltname", 'String'>
    readonly alt: FieldRef<"Backupaltname", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Backupaltname findUnique
   */
  export type BackupaltnameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupaltname
     */
    select?: BackupaltnameSelect<ExtArgs> | null
    /**
     * Filter, which Backupaltname to fetch.
     */
    where: BackupaltnameWhereUniqueInput
  }


  /**
   * Backupaltname findUniqueOrThrow
   */
  export type BackupaltnameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupaltname
     */
    select?: BackupaltnameSelect<ExtArgs> | null
    /**
     * Filter, which Backupaltname to fetch.
     */
    where: BackupaltnameWhereUniqueInput
  }


  /**
   * Backupaltname findFirst
   */
  export type BackupaltnameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupaltname
     */
    select?: BackupaltnameSelect<ExtArgs> | null
    /**
     * Filter, which Backupaltname to fetch.
     */
    where?: BackupaltnameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupaltnames to fetch.
     */
    orderBy?: BackupaltnameOrderByWithRelationInput | BackupaltnameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Backupaltnames.
     */
    cursor?: BackupaltnameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupaltnames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupaltnames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Backupaltnames.
     */
    distinct?: BackupaltnameScalarFieldEnum | BackupaltnameScalarFieldEnum[]
  }


  /**
   * Backupaltname findFirstOrThrow
   */
  export type BackupaltnameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupaltname
     */
    select?: BackupaltnameSelect<ExtArgs> | null
    /**
     * Filter, which Backupaltname to fetch.
     */
    where?: BackupaltnameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupaltnames to fetch.
     */
    orderBy?: BackupaltnameOrderByWithRelationInput | BackupaltnameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Backupaltnames.
     */
    cursor?: BackupaltnameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupaltnames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupaltnames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Backupaltnames.
     */
    distinct?: BackupaltnameScalarFieldEnum | BackupaltnameScalarFieldEnum[]
  }


  /**
   * Backupaltname findMany
   */
  export type BackupaltnameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupaltname
     */
    select?: BackupaltnameSelect<ExtArgs> | null
    /**
     * Filter, which Backupaltnames to fetch.
     */
    where?: BackupaltnameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Backupaltnames to fetch.
     */
    orderBy?: BackupaltnameOrderByWithRelationInput | BackupaltnameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Backupaltnames.
     */
    cursor?: BackupaltnameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Backupaltnames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Backupaltnames.
     */
    skip?: number
    distinct?: BackupaltnameScalarFieldEnum | BackupaltnameScalarFieldEnum[]
  }


  /**
   * Backupaltname create
   */
  export type BackupaltnameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupaltname
     */
    select?: BackupaltnameSelect<ExtArgs> | null
    /**
     * The data needed to create a Backupaltname.
     */
    data: XOR<BackupaltnameCreateInput, BackupaltnameUncheckedCreateInput>
  }


  /**
   * Backupaltname createMany
   */
  export type BackupaltnameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Backupaltnames.
     */
    data: BackupaltnameCreateManyInput | BackupaltnameCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Backupaltname update
   */
  export type BackupaltnameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupaltname
     */
    select?: BackupaltnameSelect<ExtArgs> | null
    /**
     * The data needed to update a Backupaltname.
     */
    data: XOR<BackupaltnameUpdateInput, BackupaltnameUncheckedUpdateInput>
    /**
     * Choose, which Backupaltname to update.
     */
    where: BackupaltnameWhereUniqueInput
  }


  /**
   * Backupaltname updateMany
   */
  export type BackupaltnameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Backupaltnames.
     */
    data: XOR<BackupaltnameUpdateManyMutationInput, BackupaltnameUncheckedUpdateManyInput>
    /**
     * Filter which Backupaltnames to update
     */
    where?: BackupaltnameWhereInput
  }


  /**
   * Backupaltname upsert
   */
  export type BackupaltnameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupaltname
     */
    select?: BackupaltnameSelect<ExtArgs> | null
    /**
     * The filter to search for the Backupaltname to update in case it exists.
     */
    where: BackupaltnameWhereUniqueInput
    /**
     * In case the Backupaltname found by the `where` argument doesn't exist, create a new Backupaltname with this data.
     */
    create: XOR<BackupaltnameCreateInput, BackupaltnameUncheckedCreateInput>
    /**
     * In case the Backupaltname was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BackupaltnameUpdateInput, BackupaltnameUncheckedUpdateInput>
  }


  /**
   * Backupaltname delete
   */
  export type BackupaltnameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupaltname
     */
    select?: BackupaltnameSelect<ExtArgs> | null
    /**
     * Filter which Backupaltname to delete.
     */
    where: BackupaltnameWhereUniqueInput
  }


  /**
   * Backupaltname deleteMany
   */
  export type BackupaltnameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Backupaltnames to delete
     */
    where?: BackupaltnameWhereInput
  }


  /**
   * Backupaltname without action
   */
  export type BackupaltnameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Backupaltname
     */
    select?: BackupaltnameSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StoreScalarFieldEnum: {
    name: 'name',
    plan: 'plan',
    dataUsed: 'dataUsed',
    chargeId: 'chargeId',
    autoCompression: 'autoCompression',
    autoFileRename: 'autoFileRename',
    batchCompress: 'batchCompress',
    batchRestore: 'batchRestore',
    autoAltRename: 'autoAltRename',
    compressionType: 'compressionType',
    jpeg: 'jpeg',
    png: 'png',
    others: 'others'
  };

  export type StoreScalarFieldEnum = (typeof StoreScalarFieldEnum)[keyof typeof StoreScalarFieldEnum]


  export const FilerenameScalarFieldEnum: {
    id: 'id',
    product_vendor: 'product_vendor',
    variant_title: 'variant_title',
    product_page_title: 'product_page_title',
    product_type: 'product_type',
    product_barcode: 'product_barcode',
    product_title: 'product_title',
    product_sku: 'product_sku',
    storename: 'storename'
  };

  export type FilerenameScalarFieldEnum = (typeof FilerenameScalarFieldEnum)[keyof typeof FilerenameScalarFieldEnum]


  export const AltrenameScalarFieldEnum: {
    id: 'id',
    product_vendor: 'product_vendor',
    variant_title: 'variant_title',
    product_page_title: 'product_page_title',
    product_type: 'product_type',
    product_barcode: 'product_barcode',
    product_title: 'product_title',
    product_sku: 'product_sku',
    storename: 'storename'
  };

  export type AltrenameScalarFieldEnum = (typeof AltrenameScalarFieldEnum)[keyof typeof AltrenameScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    title: 'title',
    product_vendor: 'product_vendor',
    variant_title: 'variant_title',
    product_page_title: 'product_page_title',
    product_type: 'product_type',
    product_barcode: 'product_barcode',
    product_title: 'product_title',
    product_sku: 'product_sku',
    storename: 'storename'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    url: 'url',
    name: 'name',
    alt: 'alt',
    productId: 'productId',
    status: 'status',
    fileRename: 'fileRename',
    altRename: 'altRename'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const BackupimageScalarFieldEnum: {
    restoreId: 'restoreId',
    url: 'url'
  };

  export type BackupimageScalarFieldEnum = (typeof BackupimageScalarFieldEnum)[keyof typeof BackupimageScalarFieldEnum]


  export const BackupfilenameScalarFieldEnum: {
    restoreId: 'restoreId',
    name: 'name'
  };

  export type BackupfilenameScalarFieldEnum = (typeof BackupfilenameScalarFieldEnum)[keyof typeof BackupfilenameScalarFieldEnum]


  export const BackupaltnameScalarFieldEnum: {
    restoreId: 'restoreId',
    alt: 'alt'
  };

  export type BackupaltnameScalarFieldEnum = (typeof BackupaltnameScalarFieldEnum)[keyof typeof BackupaltnameScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Plan'
   */
  export type EnumPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Plan'>
    


  /**
   * Reference to a field of type 'Plan[]'
   */
  export type ListEnumPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Plan[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'CompressType'
   */
  export type EnumCompressTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompressType'>
    


  /**
   * Reference to a field of type 'CompressType[]'
   */
  export type ListEnumCompressTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompressType[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type StoreWhereInput = {
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    name?: StringFilter<"Store"> | string
    plan?: EnumPlanFilter<"Store"> | $Enums.Plan
    dataUsed?: FloatNullableFilter<"Store"> | number | null
    chargeId?: StringNullableFilter<"Store"> | string | null
    autoCompression?: BoolFilter<"Store"> | boolean
    autoFileRename?: BoolFilter<"Store"> | boolean
    batchCompress?: BoolFilter<"Store"> | boolean
    batchRestore?: BoolFilter<"Store"> | boolean
    autoAltRename?: BoolFilter<"Store"> | boolean
    compressionType?: EnumCompressTypeNullableFilter<"Store"> | $Enums.CompressType | null
    jpeg?: FloatNullableFilter<"Store"> | number | null
    png?: FloatNullableFilter<"Store"> | number | null
    others?: FloatNullableFilter<"Store"> | number | null
    product?: ProductListRelationFilter
    filerename?: FilerenameListRelationFilter
    altrename?: AltrenameListRelationFilter
  }

  export type StoreOrderByWithRelationInput = {
    name?: SortOrder
    plan?: SortOrder
    dataUsed?: SortOrderInput | SortOrder
    chargeId?: SortOrderInput | SortOrder
    autoCompression?: SortOrder
    autoFileRename?: SortOrder
    batchCompress?: SortOrder
    batchRestore?: SortOrder
    autoAltRename?: SortOrder
    compressionType?: SortOrderInput | SortOrder
    jpeg?: SortOrderInput | SortOrder
    png?: SortOrderInput | SortOrder
    others?: SortOrderInput | SortOrder
    product?: ProductOrderByRelationAggregateInput
    filerename?: FilerenameOrderByRelationAggregateInput
    altrename?: AltrenameOrderByRelationAggregateInput
  }

  export type StoreWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    plan?: EnumPlanFilter<"Store"> | $Enums.Plan
    dataUsed?: FloatNullableFilter<"Store"> | number | null
    chargeId?: StringNullableFilter<"Store"> | string | null
    autoCompression?: BoolFilter<"Store"> | boolean
    autoFileRename?: BoolFilter<"Store"> | boolean
    batchCompress?: BoolFilter<"Store"> | boolean
    batchRestore?: BoolFilter<"Store"> | boolean
    autoAltRename?: BoolFilter<"Store"> | boolean
    compressionType?: EnumCompressTypeNullableFilter<"Store"> | $Enums.CompressType | null
    jpeg?: FloatNullableFilter<"Store"> | number | null
    png?: FloatNullableFilter<"Store"> | number | null
    others?: FloatNullableFilter<"Store"> | number | null
    product?: ProductListRelationFilter
    filerename?: FilerenameListRelationFilter
    altrename?: AltrenameListRelationFilter
  }, "name">

  export type StoreOrderByWithAggregationInput = {
    name?: SortOrder
    plan?: SortOrder
    dataUsed?: SortOrderInput | SortOrder
    chargeId?: SortOrderInput | SortOrder
    autoCompression?: SortOrder
    autoFileRename?: SortOrder
    batchCompress?: SortOrder
    batchRestore?: SortOrder
    autoAltRename?: SortOrder
    compressionType?: SortOrderInput | SortOrder
    jpeg?: SortOrderInput | SortOrder
    png?: SortOrderInput | SortOrder
    others?: SortOrderInput | SortOrder
    _count?: StoreCountOrderByAggregateInput
    _avg?: StoreAvgOrderByAggregateInput
    _max?: StoreMaxOrderByAggregateInput
    _min?: StoreMinOrderByAggregateInput
    _sum?: StoreSumOrderByAggregateInput
  }

  export type StoreScalarWhereWithAggregatesInput = {
    AND?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    OR?: StoreScalarWhereWithAggregatesInput[]
    NOT?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Store"> | string
    plan?: EnumPlanWithAggregatesFilter<"Store"> | $Enums.Plan
    dataUsed?: FloatNullableWithAggregatesFilter<"Store"> | number | null
    chargeId?: StringNullableWithAggregatesFilter<"Store"> | string | null
    autoCompression?: BoolWithAggregatesFilter<"Store"> | boolean
    autoFileRename?: BoolWithAggregatesFilter<"Store"> | boolean
    batchCompress?: BoolWithAggregatesFilter<"Store"> | boolean
    batchRestore?: BoolWithAggregatesFilter<"Store"> | boolean
    autoAltRename?: BoolWithAggregatesFilter<"Store"> | boolean
    compressionType?: EnumCompressTypeNullableWithAggregatesFilter<"Store"> | $Enums.CompressType | null
    jpeg?: FloatNullableWithAggregatesFilter<"Store"> | number | null
    png?: FloatNullableWithAggregatesFilter<"Store"> | number | null
    others?: FloatNullableWithAggregatesFilter<"Store"> | number | null
  }

  export type FilerenameWhereInput = {
    AND?: FilerenameWhereInput | FilerenameWhereInput[]
    OR?: FilerenameWhereInput[]
    NOT?: FilerenameWhereInput | FilerenameWhereInput[]
    id?: StringFilter<"Filerename"> | string
    product_vendor?: BoolFilter<"Filerename"> | boolean
    variant_title?: BoolFilter<"Filerename"> | boolean
    product_page_title?: BoolFilter<"Filerename"> | boolean
    product_type?: BoolFilter<"Filerename"> | boolean
    product_barcode?: BoolFilter<"Filerename"> | boolean
    product_title?: BoolFilter<"Filerename"> | boolean
    product_sku?: BoolFilter<"Filerename"> | boolean
    storename?: StringFilter<"Filerename"> | string
    store?: XOR<StoreRelationFilter, StoreWhereInput>
  }

  export type FilerenameOrderByWithRelationInput = {
    id?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
    store?: StoreOrderByWithRelationInput
  }

  export type FilerenameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FilerenameWhereInput | FilerenameWhereInput[]
    OR?: FilerenameWhereInput[]
    NOT?: FilerenameWhereInput | FilerenameWhereInput[]
    product_vendor?: BoolFilter<"Filerename"> | boolean
    variant_title?: BoolFilter<"Filerename"> | boolean
    product_page_title?: BoolFilter<"Filerename"> | boolean
    product_type?: BoolFilter<"Filerename"> | boolean
    product_barcode?: BoolFilter<"Filerename"> | boolean
    product_title?: BoolFilter<"Filerename"> | boolean
    product_sku?: BoolFilter<"Filerename"> | boolean
    storename?: StringFilter<"Filerename"> | string
    store?: XOR<StoreRelationFilter, StoreWhereInput>
  }, "id">

  export type FilerenameOrderByWithAggregationInput = {
    id?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
    _count?: FilerenameCountOrderByAggregateInput
    _max?: FilerenameMaxOrderByAggregateInput
    _min?: FilerenameMinOrderByAggregateInput
  }

  export type FilerenameScalarWhereWithAggregatesInput = {
    AND?: FilerenameScalarWhereWithAggregatesInput | FilerenameScalarWhereWithAggregatesInput[]
    OR?: FilerenameScalarWhereWithAggregatesInput[]
    NOT?: FilerenameScalarWhereWithAggregatesInput | FilerenameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Filerename"> | string
    product_vendor?: BoolWithAggregatesFilter<"Filerename"> | boolean
    variant_title?: BoolWithAggregatesFilter<"Filerename"> | boolean
    product_page_title?: BoolWithAggregatesFilter<"Filerename"> | boolean
    product_type?: BoolWithAggregatesFilter<"Filerename"> | boolean
    product_barcode?: BoolWithAggregatesFilter<"Filerename"> | boolean
    product_title?: BoolWithAggregatesFilter<"Filerename"> | boolean
    product_sku?: BoolWithAggregatesFilter<"Filerename"> | boolean
    storename?: StringWithAggregatesFilter<"Filerename"> | string
  }

  export type AltrenameWhereInput = {
    AND?: AltrenameWhereInput | AltrenameWhereInput[]
    OR?: AltrenameWhereInput[]
    NOT?: AltrenameWhereInput | AltrenameWhereInput[]
    id?: StringFilter<"Altrename"> | string
    product_vendor?: BoolFilter<"Altrename"> | boolean
    variant_title?: BoolFilter<"Altrename"> | boolean
    product_page_title?: BoolFilter<"Altrename"> | boolean
    product_type?: BoolFilter<"Altrename"> | boolean
    product_barcode?: BoolFilter<"Altrename"> | boolean
    product_title?: BoolFilter<"Altrename"> | boolean
    product_sku?: BoolFilter<"Altrename"> | boolean
    storename?: StringFilter<"Altrename"> | string
    store?: XOR<StoreRelationFilter, StoreWhereInput>
  }

  export type AltrenameOrderByWithRelationInput = {
    id?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
    store?: StoreOrderByWithRelationInput
  }

  export type AltrenameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AltrenameWhereInput | AltrenameWhereInput[]
    OR?: AltrenameWhereInput[]
    NOT?: AltrenameWhereInput | AltrenameWhereInput[]
    product_vendor?: BoolFilter<"Altrename"> | boolean
    variant_title?: BoolFilter<"Altrename"> | boolean
    product_page_title?: BoolFilter<"Altrename"> | boolean
    product_type?: BoolFilter<"Altrename"> | boolean
    product_barcode?: BoolFilter<"Altrename"> | boolean
    product_title?: BoolFilter<"Altrename"> | boolean
    product_sku?: BoolFilter<"Altrename"> | boolean
    storename?: StringFilter<"Altrename"> | string
    store?: XOR<StoreRelationFilter, StoreWhereInput>
  }, "id">

  export type AltrenameOrderByWithAggregationInput = {
    id?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
    _count?: AltrenameCountOrderByAggregateInput
    _max?: AltrenameMaxOrderByAggregateInput
    _min?: AltrenameMinOrderByAggregateInput
  }

  export type AltrenameScalarWhereWithAggregatesInput = {
    AND?: AltrenameScalarWhereWithAggregatesInput | AltrenameScalarWhereWithAggregatesInput[]
    OR?: AltrenameScalarWhereWithAggregatesInput[]
    NOT?: AltrenameScalarWhereWithAggregatesInput | AltrenameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Altrename"> | string
    product_vendor?: BoolWithAggregatesFilter<"Altrename"> | boolean
    variant_title?: BoolWithAggregatesFilter<"Altrename"> | boolean
    product_page_title?: BoolWithAggregatesFilter<"Altrename"> | boolean
    product_type?: BoolWithAggregatesFilter<"Altrename"> | boolean
    product_barcode?: BoolWithAggregatesFilter<"Altrename"> | boolean
    product_title?: BoolWithAggregatesFilter<"Altrename"> | boolean
    product_sku?: BoolWithAggregatesFilter<"Altrename"> | boolean
    storename?: StringWithAggregatesFilter<"Altrename"> | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    title?: StringFilter<"Product"> | string
    product_vendor?: StringNullableFilter<"Product"> | string | null
    variant_title?: StringNullableFilter<"Product"> | string | null
    product_page_title?: StringNullableFilter<"Product"> | string | null
    product_type?: StringNullableFilter<"Product"> | string | null
    product_barcode?: StringNullableFilter<"Product"> | string | null
    product_title?: StringNullableFilter<"Product"> | string | null
    product_sku?: StringNullableFilter<"Product"> | string | null
    storename?: StringFilter<"Product"> | string
    images?: ImageListRelationFilter
    store?: XOR<StoreRelationFilter, StoreWhereInput>
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    product_vendor?: SortOrderInput | SortOrder
    variant_title?: SortOrderInput | SortOrder
    product_page_title?: SortOrderInput | SortOrder
    product_type?: SortOrderInput | SortOrder
    product_barcode?: SortOrderInput | SortOrder
    product_title?: SortOrderInput | SortOrder
    product_sku?: SortOrderInput | SortOrder
    storename?: SortOrder
    images?: ImageOrderByRelationAggregateInput
    store?: StoreOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    title?: StringFilter<"Product"> | string
    product_vendor?: StringNullableFilter<"Product"> | string | null
    variant_title?: StringNullableFilter<"Product"> | string | null
    product_page_title?: StringNullableFilter<"Product"> | string | null
    product_type?: StringNullableFilter<"Product"> | string | null
    product_barcode?: StringNullableFilter<"Product"> | string | null
    product_title?: StringNullableFilter<"Product"> | string | null
    product_sku?: StringNullableFilter<"Product"> | string | null
    storename?: StringFilter<"Product"> | string
    images?: ImageListRelationFilter
    store?: XOR<StoreRelationFilter, StoreWhereInput>
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    product_vendor?: SortOrderInput | SortOrder
    variant_title?: SortOrderInput | SortOrder
    product_page_title?: SortOrderInput | SortOrder
    product_type?: SortOrderInput | SortOrder
    product_barcode?: SortOrderInput | SortOrder
    product_title?: SortOrderInput | SortOrder
    product_sku?: SortOrderInput | SortOrder
    storename?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    title?: StringWithAggregatesFilter<"Product"> | string
    product_vendor?: StringNullableWithAggregatesFilter<"Product"> | string | null
    variant_title?: StringNullableWithAggregatesFilter<"Product"> | string | null
    product_page_title?: StringNullableWithAggregatesFilter<"Product"> | string | null
    product_type?: StringNullableWithAggregatesFilter<"Product"> | string | null
    product_barcode?: StringNullableWithAggregatesFilter<"Product"> | string | null
    product_title?: StringNullableWithAggregatesFilter<"Product"> | string | null
    product_sku?: StringNullableWithAggregatesFilter<"Product"> | string | null
    storename?: StringWithAggregatesFilter<"Product"> | string
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    name?: StringNullableFilter<"Image"> | string | null
    alt?: StringNullableFilter<"Image"> | string | null
    productId?: StringFilter<"Image"> | string
    status?: EnumStatusNullableFilter<"Image"> | $Enums.Status | null
    fileRename?: BoolNullableFilter<"Image"> | boolean | null
    altRename?: BoolNullableFilter<"Image"> | boolean | null
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrderInput | SortOrder
    alt?: SortOrderInput | SortOrder
    productId?: SortOrder
    status?: SortOrderInput | SortOrder
    fileRename?: SortOrderInput | SortOrder
    altRename?: SortOrderInput | SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    url?: StringFilter<"Image"> | string
    name?: StringNullableFilter<"Image"> | string | null
    alt?: StringNullableFilter<"Image"> | string | null
    productId?: StringFilter<"Image"> | string
    status?: EnumStatusNullableFilter<"Image"> | $Enums.Status | null
    fileRename?: BoolNullableFilter<"Image"> | boolean | null
    altRename?: BoolNullableFilter<"Image"> | boolean | null
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrderInput | SortOrder
    alt?: SortOrderInput | SortOrder
    productId?: SortOrder
    status?: SortOrderInput | SortOrder
    fileRename?: SortOrderInput | SortOrder
    altRename?: SortOrderInput | SortOrder
    _count?: ImageCountOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Image"> | string
    url?: StringWithAggregatesFilter<"Image"> | string
    name?: StringNullableWithAggregatesFilter<"Image"> | string | null
    alt?: StringNullableWithAggregatesFilter<"Image"> | string | null
    productId?: StringWithAggregatesFilter<"Image"> | string
    status?: EnumStatusNullableWithAggregatesFilter<"Image"> | $Enums.Status | null
    fileRename?: BoolNullableWithAggregatesFilter<"Image"> | boolean | null
    altRename?: BoolNullableWithAggregatesFilter<"Image"> | boolean | null
  }

  export type BackupimageWhereInput = {
    AND?: BackupimageWhereInput | BackupimageWhereInput[]
    OR?: BackupimageWhereInput[]
    NOT?: BackupimageWhereInput | BackupimageWhereInput[]
    restoreId?: StringFilter<"Backupimage"> | string
    url?: StringFilter<"Backupimage"> | string
  }

  export type BackupimageOrderByWithRelationInput = {
    restoreId?: SortOrder
    url?: SortOrder
  }

  export type BackupimageWhereUniqueInput = Prisma.AtLeast<{
    restoreId?: string
    AND?: BackupimageWhereInput | BackupimageWhereInput[]
    OR?: BackupimageWhereInput[]
    NOT?: BackupimageWhereInput | BackupimageWhereInput[]
    url?: StringFilter<"Backupimage"> | string
  }, "restoreId">

  export type BackupimageOrderByWithAggregationInput = {
    restoreId?: SortOrder
    url?: SortOrder
    _count?: BackupimageCountOrderByAggregateInput
    _max?: BackupimageMaxOrderByAggregateInput
    _min?: BackupimageMinOrderByAggregateInput
  }

  export type BackupimageScalarWhereWithAggregatesInput = {
    AND?: BackupimageScalarWhereWithAggregatesInput | BackupimageScalarWhereWithAggregatesInput[]
    OR?: BackupimageScalarWhereWithAggregatesInput[]
    NOT?: BackupimageScalarWhereWithAggregatesInput | BackupimageScalarWhereWithAggregatesInput[]
    restoreId?: StringWithAggregatesFilter<"Backupimage"> | string
    url?: StringWithAggregatesFilter<"Backupimage"> | string
  }

  export type BackupfilenameWhereInput = {
    AND?: BackupfilenameWhereInput | BackupfilenameWhereInput[]
    OR?: BackupfilenameWhereInput[]
    NOT?: BackupfilenameWhereInput | BackupfilenameWhereInput[]
    restoreId?: StringFilter<"Backupfilename"> | string
    name?: StringFilter<"Backupfilename"> | string
  }

  export type BackupfilenameOrderByWithRelationInput = {
    restoreId?: SortOrder
    name?: SortOrder
  }

  export type BackupfilenameWhereUniqueInput = Prisma.AtLeast<{
    restoreId?: string
    AND?: BackupfilenameWhereInput | BackupfilenameWhereInput[]
    OR?: BackupfilenameWhereInput[]
    NOT?: BackupfilenameWhereInput | BackupfilenameWhereInput[]
    name?: StringFilter<"Backupfilename"> | string
  }, "restoreId">

  export type BackupfilenameOrderByWithAggregationInput = {
    restoreId?: SortOrder
    name?: SortOrder
    _count?: BackupfilenameCountOrderByAggregateInput
    _max?: BackupfilenameMaxOrderByAggregateInput
    _min?: BackupfilenameMinOrderByAggregateInput
  }

  export type BackupfilenameScalarWhereWithAggregatesInput = {
    AND?: BackupfilenameScalarWhereWithAggregatesInput | BackupfilenameScalarWhereWithAggregatesInput[]
    OR?: BackupfilenameScalarWhereWithAggregatesInput[]
    NOT?: BackupfilenameScalarWhereWithAggregatesInput | BackupfilenameScalarWhereWithAggregatesInput[]
    restoreId?: StringWithAggregatesFilter<"Backupfilename"> | string
    name?: StringWithAggregatesFilter<"Backupfilename"> | string
  }

  export type BackupaltnameWhereInput = {
    AND?: BackupaltnameWhereInput | BackupaltnameWhereInput[]
    OR?: BackupaltnameWhereInput[]
    NOT?: BackupaltnameWhereInput | BackupaltnameWhereInput[]
    restoreId?: StringFilter<"Backupaltname"> | string
    alt?: StringFilter<"Backupaltname"> | string
  }

  export type BackupaltnameOrderByWithRelationInput = {
    restoreId?: SortOrder
    alt?: SortOrder
  }

  export type BackupaltnameWhereUniqueInput = Prisma.AtLeast<{
    restoreId?: string
    AND?: BackupaltnameWhereInput | BackupaltnameWhereInput[]
    OR?: BackupaltnameWhereInput[]
    NOT?: BackupaltnameWhereInput | BackupaltnameWhereInput[]
    alt?: StringFilter<"Backupaltname"> | string
  }, "restoreId">

  export type BackupaltnameOrderByWithAggregationInput = {
    restoreId?: SortOrder
    alt?: SortOrder
    _count?: BackupaltnameCountOrderByAggregateInput
    _max?: BackupaltnameMaxOrderByAggregateInput
    _min?: BackupaltnameMinOrderByAggregateInput
  }

  export type BackupaltnameScalarWhereWithAggregatesInput = {
    AND?: BackupaltnameScalarWhereWithAggregatesInput | BackupaltnameScalarWhereWithAggregatesInput[]
    OR?: BackupaltnameScalarWhereWithAggregatesInput[]
    NOT?: BackupaltnameScalarWhereWithAggregatesInput | BackupaltnameScalarWhereWithAggregatesInput[]
    restoreId?: StringWithAggregatesFilter<"Backupaltname"> | string
    alt?: StringWithAggregatesFilter<"Backupaltname"> | string
  }

  export type StoreCreateInput = {
    name: string
    plan?: $Enums.Plan
    dataUsed?: number | null
    chargeId?: string | null
    autoCompression?: boolean
    autoFileRename?: boolean
    batchCompress?: boolean
    batchRestore?: boolean
    autoAltRename?: boolean
    compressionType?: $Enums.CompressType | null
    jpeg?: number | null
    png?: number | null
    others?: number | null
    product?: ProductCreateNestedManyWithoutStoreInput
    filerename?: FilerenameCreateNestedManyWithoutStoreInput
    altrename?: AltrenameCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateInput = {
    name: string
    plan?: $Enums.Plan
    dataUsed?: number | null
    chargeId?: string | null
    autoCompression?: boolean
    autoFileRename?: boolean
    batchCompress?: boolean
    batchRestore?: boolean
    autoAltRename?: boolean
    compressionType?: $Enums.CompressType | null
    jpeg?: number | null
    png?: number | null
    others?: number | null
    product?: ProductUncheckedCreateNestedManyWithoutStoreInput
    filerename?: FilerenameUncheckedCreateNestedManyWithoutStoreInput
    altrename?: AltrenameUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    dataUsed?: NullableFloatFieldUpdateOperationsInput | number | null
    chargeId?: NullableStringFieldUpdateOperationsInput | string | null
    autoCompression?: BoolFieldUpdateOperationsInput | boolean
    autoFileRename?: BoolFieldUpdateOperationsInput | boolean
    batchCompress?: BoolFieldUpdateOperationsInput | boolean
    batchRestore?: BoolFieldUpdateOperationsInput | boolean
    autoAltRename?: BoolFieldUpdateOperationsInput | boolean
    compressionType?: NullableEnumCompressTypeFieldUpdateOperationsInput | $Enums.CompressType | null
    jpeg?: NullableFloatFieldUpdateOperationsInput | number | null
    png?: NullableFloatFieldUpdateOperationsInput | number | null
    others?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: ProductUpdateManyWithoutStoreNestedInput
    filerename?: FilerenameUpdateManyWithoutStoreNestedInput
    altrename?: AltrenameUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    dataUsed?: NullableFloatFieldUpdateOperationsInput | number | null
    chargeId?: NullableStringFieldUpdateOperationsInput | string | null
    autoCompression?: BoolFieldUpdateOperationsInput | boolean
    autoFileRename?: BoolFieldUpdateOperationsInput | boolean
    batchCompress?: BoolFieldUpdateOperationsInput | boolean
    batchRestore?: BoolFieldUpdateOperationsInput | boolean
    autoAltRename?: BoolFieldUpdateOperationsInput | boolean
    compressionType?: NullableEnumCompressTypeFieldUpdateOperationsInput | $Enums.CompressType | null
    jpeg?: NullableFloatFieldUpdateOperationsInput | number | null
    png?: NullableFloatFieldUpdateOperationsInput | number | null
    others?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: ProductUncheckedUpdateManyWithoutStoreNestedInput
    filerename?: FilerenameUncheckedUpdateManyWithoutStoreNestedInput
    altrename?: AltrenameUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreCreateManyInput = {
    name: string
    plan?: $Enums.Plan
    dataUsed?: number | null
    chargeId?: string | null
    autoCompression?: boolean
    autoFileRename?: boolean
    batchCompress?: boolean
    batchRestore?: boolean
    autoAltRename?: boolean
    compressionType?: $Enums.CompressType | null
    jpeg?: number | null
    png?: number | null
    others?: number | null
  }

  export type StoreUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    dataUsed?: NullableFloatFieldUpdateOperationsInput | number | null
    chargeId?: NullableStringFieldUpdateOperationsInput | string | null
    autoCompression?: BoolFieldUpdateOperationsInput | boolean
    autoFileRename?: BoolFieldUpdateOperationsInput | boolean
    batchCompress?: BoolFieldUpdateOperationsInput | boolean
    batchRestore?: BoolFieldUpdateOperationsInput | boolean
    autoAltRename?: BoolFieldUpdateOperationsInput | boolean
    compressionType?: NullableEnumCompressTypeFieldUpdateOperationsInput | $Enums.CompressType | null
    jpeg?: NullableFloatFieldUpdateOperationsInput | number | null
    png?: NullableFloatFieldUpdateOperationsInput | number | null
    others?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type StoreUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    dataUsed?: NullableFloatFieldUpdateOperationsInput | number | null
    chargeId?: NullableStringFieldUpdateOperationsInput | string | null
    autoCompression?: BoolFieldUpdateOperationsInput | boolean
    autoFileRename?: BoolFieldUpdateOperationsInput | boolean
    batchCompress?: BoolFieldUpdateOperationsInput | boolean
    batchRestore?: BoolFieldUpdateOperationsInput | boolean
    autoAltRename?: BoolFieldUpdateOperationsInput | boolean
    compressionType?: NullableEnumCompressTypeFieldUpdateOperationsInput | $Enums.CompressType | null
    jpeg?: NullableFloatFieldUpdateOperationsInput | number | null
    png?: NullableFloatFieldUpdateOperationsInput | number | null
    others?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type FilerenameCreateInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    store: StoreCreateNestedOneWithoutFilerenameInput
  }

  export type FilerenameUncheckedCreateInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    storename: string
  }

  export type FilerenameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
    store?: StoreUpdateOneRequiredWithoutFilerenameNestedInput
  }

  export type FilerenameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
    storename?: StringFieldUpdateOperationsInput | string
  }

  export type FilerenameCreateManyInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    storename: string
  }

  export type FilerenameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FilerenameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
    storename?: StringFieldUpdateOperationsInput | string
  }

  export type AltrenameCreateInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    store: StoreCreateNestedOneWithoutAltrenameInput
  }

  export type AltrenameUncheckedCreateInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    storename: string
  }

  export type AltrenameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
    store?: StoreUpdateOneRequiredWithoutAltrenameNestedInput
  }

  export type AltrenameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
    storename?: StringFieldUpdateOperationsInput | string
  }

  export type AltrenameCreateManyInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
    storename: string
  }

  export type AltrenameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AltrenameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
    storename?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateInput = {
    id: string
    title: string
    product_vendor?: string | null
    variant_title?: string | null
    product_page_title?: string | null
    product_type?: string | null
    product_barcode?: string | null
    product_title?: string | null
    product_sku?: string | null
    images?: ImageCreateNestedManyWithoutProductInput
    store: StoreCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id: string
    title: string
    product_vendor?: string | null
    variant_title?: string | null
    product_page_title?: string | null
    product_type?: string | null
    product_barcode?: string | null
    product_title?: string | null
    product_sku?: string | null
    storename: string
    images?: ImageUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    product_vendor?: NullableStringFieldUpdateOperationsInput | string | null
    variant_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_page_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    product_barcode?: NullableStringFieldUpdateOperationsInput | string | null
    product_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUpdateManyWithoutProductNestedInput
    store?: StoreUpdateOneRequiredWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    product_vendor?: NullableStringFieldUpdateOperationsInput | string | null
    variant_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_page_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    product_barcode?: NullableStringFieldUpdateOperationsInput | string | null
    product_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    storename?: StringFieldUpdateOperationsInput | string
    images?: ImageUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id: string
    title: string
    product_vendor?: string | null
    variant_title?: string | null
    product_page_title?: string | null
    product_type?: string | null
    product_barcode?: string | null
    product_title?: string | null
    product_sku?: string | null
    storename: string
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    product_vendor?: NullableStringFieldUpdateOperationsInput | string | null
    variant_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_page_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    product_barcode?: NullableStringFieldUpdateOperationsInput | string | null
    product_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    product_vendor?: NullableStringFieldUpdateOperationsInput | string | null
    variant_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_page_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    product_barcode?: NullableStringFieldUpdateOperationsInput | string | null
    product_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    storename?: StringFieldUpdateOperationsInput | string
  }

  export type ImageCreateInput = {
    id: string
    url: string
    name?: string | null
    alt?: string | null
    status?: $Enums.Status | null
    fileRename?: boolean | null
    altRename?: boolean | null
    product: ProductCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateInput = {
    id: string
    url: string
    name?: string | null
    alt?: string | null
    productId: string
    status?: $Enums.Status | null
    fileRename?: boolean | null
    altRename?: boolean | null
  }

  export type ImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    fileRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
    altRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
    product?: ProductUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    fileRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
    altRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ImageCreateManyInput = {
    id: string
    url: string
    name?: string | null
    alt?: string | null
    productId: string
    status?: $Enums.Status | null
    fileRename?: boolean | null
    altRename?: boolean | null
  }

  export type ImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    fileRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
    altRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    status?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    fileRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
    altRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type BackupimageCreateInput = {
    restoreId: string
    url: string
  }

  export type BackupimageUncheckedCreateInput = {
    restoreId: string
    url: string
  }

  export type BackupimageUpdateInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type BackupimageUncheckedUpdateInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type BackupimageCreateManyInput = {
    restoreId: string
    url: string
  }

  export type BackupimageUpdateManyMutationInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type BackupimageUncheckedUpdateManyInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type BackupfilenameCreateInput = {
    restoreId: string
    name: string
  }

  export type BackupfilenameUncheckedCreateInput = {
    restoreId: string
    name: string
  }

  export type BackupfilenameUpdateInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BackupfilenameUncheckedUpdateInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BackupfilenameCreateManyInput = {
    restoreId: string
    name: string
  }

  export type BackupfilenameUpdateManyMutationInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BackupfilenameUncheckedUpdateManyInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BackupaltnameCreateInput = {
    restoreId: string
    alt: string
  }

  export type BackupaltnameUncheckedCreateInput = {
    restoreId: string
    alt: string
  }

  export type BackupaltnameUpdateInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    alt?: StringFieldUpdateOperationsInput | string
  }

  export type BackupaltnameUncheckedUpdateInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    alt?: StringFieldUpdateOperationsInput | string
  }

  export type BackupaltnameCreateManyInput = {
    restoreId: string
    alt: string
  }

  export type BackupaltnameUpdateManyMutationInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    alt?: StringFieldUpdateOperationsInput | string
  }

  export type BackupaltnameUncheckedUpdateManyInput = {
    restoreId?: StringFieldUpdateOperationsInput | string
    alt?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanFilter<$PrismaModel> | $Enums.Plan
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumCompressTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CompressType | EnumCompressTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompressType[] | ListEnumCompressTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompressType[] | ListEnumCompressTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompressTypeNullableFilter<$PrismaModel> | $Enums.CompressType | null
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type FilerenameListRelationFilter = {
    every?: FilerenameWhereInput
    some?: FilerenameWhereInput
    none?: FilerenameWhereInput
  }

  export type AltrenameListRelationFilter = {
    every?: AltrenameWhereInput
    some?: AltrenameWhereInput
    none?: AltrenameWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FilerenameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AltrenameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoreCountOrderByAggregateInput = {
    name?: SortOrder
    plan?: SortOrder
    dataUsed?: SortOrder
    chargeId?: SortOrder
    autoCompression?: SortOrder
    autoFileRename?: SortOrder
    batchCompress?: SortOrder
    batchRestore?: SortOrder
    autoAltRename?: SortOrder
    compressionType?: SortOrder
    jpeg?: SortOrder
    png?: SortOrder
    others?: SortOrder
  }

  export type StoreAvgOrderByAggregateInput = {
    dataUsed?: SortOrder
    jpeg?: SortOrder
    png?: SortOrder
    others?: SortOrder
  }

  export type StoreMaxOrderByAggregateInput = {
    name?: SortOrder
    plan?: SortOrder
    dataUsed?: SortOrder
    chargeId?: SortOrder
    autoCompression?: SortOrder
    autoFileRename?: SortOrder
    batchCompress?: SortOrder
    batchRestore?: SortOrder
    autoAltRename?: SortOrder
    compressionType?: SortOrder
    jpeg?: SortOrder
    png?: SortOrder
    others?: SortOrder
  }

  export type StoreMinOrderByAggregateInput = {
    name?: SortOrder
    plan?: SortOrder
    dataUsed?: SortOrder
    chargeId?: SortOrder
    autoCompression?: SortOrder
    autoFileRename?: SortOrder
    batchCompress?: SortOrder
    batchRestore?: SortOrder
    autoAltRename?: SortOrder
    compressionType?: SortOrder
    jpeg?: SortOrder
    png?: SortOrder
    others?: SortOrder
  }

  export type StoreSumOrderByAggregateInput = {
    dataUsed?: SortOrder
    jpeg?: SortOrder
    png?: SortOrder
    others?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanWithAggregatesFilter<$PrismaModel> | $Enums.Plan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanFilter<$PrismaModel>
    _max?: NestedEnumPlanFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumCompressTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompressType | EnumCompressTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompressType[] | ListEnumCompressTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompressType[] | ListEnumCompressTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompressTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.CompressType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCompressTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumCompressTypeNullableFilter<$PrismaModel>
  }

  export type StoreRelationFilter = {
    is?: StoreWhereInput
    isNot?: StoreWhereInput
  }

  export type FilerenameCountOrderByAggregateInput = {
    id?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
  }

  export type FilerenameMaxOrderByAggregateInput = {
    id?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
  }

  export type FilerenameMinOrderByAggregateInput = {
    id?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
  }

  export type AltrenameCountOrderByAggregateInput = {
    id?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
  }

  export type AltrenameMaxOrderByAggregateInput = {
    id?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
  }

  export type AltrenameMinOrderByAggregateInput = {
    id?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type ImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    product_vendor?: SortOrder
    variant_title?: SortOrder
    product_page_title?: SortOrder
    product_type?: SortOrder
    product_barcode?: SortOrder
    product_title?: SortOrder
    product_sku?: SortOrder
    storename?: SortOrder
  }

  export type EnumStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatusNullableFilter<$PrismaModel> | $Enums.Status | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    alt?: SortOrder
    productId?: SortOrder
    status?: SortOrder
    fileRename?: SortOrder
    altRename?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    alt?: SortOrder
    productId?: SortOrder
    status?: SortOrder
    fileRename?: SortOrder
    altRename?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    alt?: SortOrder
    productId?: SortOrder
    status?: SortOrder
    fileRename?: SortOrder
    altRename?: SortOrder
  }

  export type EnumStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.Status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumStatusNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type BackupimageCountOrderByAggregateInput = {
    restoreId?: SortOrder
    url?: SortOrder
  }

  export type BackupimageMaxOrderByAggregateInput = {
    restoreId?: SortOrder
    url?: SortOrder
  }

  export type BackupimageMinOrderByAggregateInput = {
    restoreId?: SortOrder
    url?: SortOrder
  }

  export type BackupfilenameCountOrderByAggregateInput = {
    restoreId?: SortOrder
    name?: SortOrder
  }

  export type BackupfilenameMaxOrderByAggregateInput = {
    restoreId?: SortOrder
    name?: SortOrder
  }

  export type BackupfilenameMinOrderByAggregateInput = {
    restoreId?: SortOrder
    name?: SortOrder
  }

  export type BackupaltnameCountOrderByAggregateInput = {
    restoreId?: SortOrder
    alt?: SortOrder
  }

  export type BackupaltnameMaxOrderByAggregateInput = {
    restoreId?: SortOrder
    alt?: SortOrder
  }

  export type BackupaltnameMinOrderByAggregateInput = {
    restoreId?: SortOrder
    alt?: SortOrder
  }

  export type ProductCreateNestedManyWithoutStoreInput = {
    create?: XOR<ProductCreateWithoutStoreInput, ProductUncheckedCreateWithoutStoreInput> | ProductCreateWithoutStoreInput[] | ProductUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutStoreInput | ProductCreateOrConnectWithoutStoreInput[]
    createMany?: ProductCreateManyStoreInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type FilerenameCreateNestedManyWithoutStoreInput = {
    create?: XOR<FilerenameCreateWithoutStoreInput, FilerenameUncheckedCreateWithoutStoreInput> | FilerenameCreateWithoutStoreInput[] | FilerenameUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: FilerenameCreateOrConnectWithoutStoreInput | FilerenameCreateOrConnectWithoutStoreInput[]
    createMany?: FilerenameCreateManyStoreInputEnvelope
    connect?: FilerenameWhereUniqueInput | FilerenameWhereUniqueInput[]
  }

  export type AltrenameCreateNestedManyWithoutStoreInput = {
    create?: XOR<AltrenameCreateWithoutStoreInput, AltrenameUncheckedCreateWithoutStoreInput> | AltrenameCreateWithoutStoreInput[] | AltrenameUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AltrenameCreateOrConnectWithoutStoreInput | AltrenameCreateOrConnectWithoutStoreInput[]
    createMany?: AltrenameCreateManyStoreInputEnvelope
    connect?: AltrenameWhereUniqueInput | AltrenameWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<ProductCreateWithoutStoreInput, ProductUncheckedCreateWithoutStoreInput> | ProductCreateWithoutStoreInput[] | ProductUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutStoreInput | ProductCreateOrConnectWithoutStoreInput[]
    createMany?: ProductCreateManyStoreInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type FilerenameUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<FilerenameCreateWithoutStoreInput, FilerenameUncheckedCreateWithoutStoreInput> | FilerenameCreateWithoutStoreInput[] | FilerenameUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: FilerenameCreateOrConnectWithoutStoreInput | FilerenameCreateOrConnectWithoutStoreInput[]
    createMany?: FilerenameCreateManyStoreInputEnvelope
    connect?: FilerenameWhereUniqueInput | FilerenameWhereUniqueInput[]
  }

  export type AltrenameUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<AltrenameCreateWithoutStoreInput, AltrenameUncheckedCreateWithoutStoreInput> | AltrenameCreateWithoutStoreInput[] | AltrenameUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AltrenameCreateOrConnectWithoutStoreInput | AltrenameCreateOrConnectWithoutStoreInput[]
    createMany?: AltrenameCreateManyStoreInputEnvelope
    connect?: AltrenameWhereUniqueInput | AltrenameWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumPlanFieldUpdateOperationsInput = {
    set?: $Enums.Plan
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableEnumCompressTypeFieldUpdateOperationsInput = {
    set?: $Enums.CompressType | null
  }

  export type ProductUpdateManyWithoutStoreNestedInput = {
    create?: XOR<ProductCreateWithoutStoreInput, ProductUncheckedCreateWithoutStoreInput> | ProductCreateWithoutStoreInput[] | ProductUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutStoreInput | ProductCreateOrConnectWithoutStoreInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutStoreInput | ProductUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: ProductCreateManyStoreInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutStoreInput | ProductUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutStoreInput | ProductUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type FilerenameUpdateManyWithoutStoreNestedInput = {
    create?: XOR<FilerenameCreateWithoutStoreInput, FilerenameUncheckedCreateWithoutStoreInput> | FilerenameCreateWithoutStoreInput[] | FilerenameUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: FilerenameCreateOrConnectWithoutStoreInput | FilerenameCreateOrConnectWithoutStoreInput[]
    upsert?: FilerenameUpsertWithWhereUniqueWithoutStoreInput | FilerenameUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: FilerenameCreateManyStoreInputEnvelope
    set?: FilerenameWhereUniqueInput | FilerenameWhereUniqueInput[]
    disconnect?: FilerenameWhereUniqueInput | FilerenameWhereUniqueInput[]
    delete?: FilerenameWhereUniqueInput | FilerenameWhereUniqueInput[]
    connect?: FilerenameWhereUniqueInput | FilerenameWhereUniqueInput[]
    update?: FilerenameUpdateWithWhereUniqueWithoutStoreInput | FilerenameUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: FilerenameUpdateManyWithWhereWithoutStoreInput | FilerenameUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: FilerenameScalarWhereInput | FilerenameScalarWhereInput[]
  }

  export type AltrenameUpdateManyWithoutStoreNestedInput = {
    create?: XOR<AltrenameCreateWithoutStoreInput, AltrenameUncheckedCreateWithoutStoreInput> | AltrenameCreateWithoutStoreInput[] | AltrenameUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AltrenameCreateOrConnectWithoutStoreInput | AltrenameCreateOrConnectWithoutStoreInput[]
    upsert?: AltrenameUpsertWithWhereUniqueWithoutStoreInput | AltrenameUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: AltrenameCreateManyStoreInputEnvelope
    set?: AltrenameWhereUniqueInput | AltrenameWhereUniqueInput[]
    disconnect?: AltrenameWhereUniqueInput | AltrenameWhereUniqueInput[]
    delete?: AltrenameWhereUniqueInput | AltrenameWhereUniqueInput[]
    connect?: AltrenameWhereUniqueInput | AltrenameWhereUniqueInput[]
    update?: AltrenameUpdateWithWhereUniqueWithoutStoreInput | AltrenameUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: AltrenameUpdateManyWithWhereWithoutStoreInput | AltrenameUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: AltrenameScalarWhereInput | AltrenameScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<ProductCreateWithoutStoreInput, ProductUncheckedCreateWithoutStoreInput> | ProductCreateWithoutStoreInput[] | ProductUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutStoreInput | ProductCreateOrConnectWithoutStoreInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutStoreInput | ProductUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: ProductCreateManyStoreInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutStoreInput | ProductUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutStoreInput | ProductUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type FilerenameUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<FilerenameCreateWithoutStoreInput, FilerenameUncheckedCreateWithoutStoreInput> | FilerenameCreateWithoutStoreInput[] | FilerenameUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: FilerenameCreateOrConnectWithoutStoreInput | FilerenameCreateOrConnectWithoutStoreInput[]
    upsert?: FilerenameUpsertWithWhereUniqueWithoutStoreInput | FilerenameUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: FilerenameCreateManyStoreInputEnvelope
    set?: FilerenameWhereUniqueInput | FilerenameWhereUniqueInput[]
    disconnect?: FilerenameWhereUniqueInput | FilerenameWhereUniqueInput[]
    delete?: FilerenameWhereUniqueInput | FilerenameWhereUniqueInput[]
    connect?: FilerenameWhereUniqueInput | FilerenameWhereUniqueInput[]
    update?: FilerenameUpdateWithWhereUniqueWithoutStoreInput | FilerenameUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: FilerenameUpdateManyWithWhereWithoutStoreInput | FilerenameUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: FilerenameScalarWhereInput | FilerenameScalarWhereInput[]
  }

  export type AltrenameUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<AltrenameCreateWithoutStoreInput, AltrenameUncheckedCreateWithoutStoreInput> | AltrenameCreateWithoutStoreInput[] | AltrenameUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AltrenameCreateOrConnectWithoutStoreInput | AltrenameCreateOrConnectWithoutStoreInput[]
    upsert?: AltrenameUpsertWithWhereUniqueWithoutStoreInput | AltrenameUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: AltrenameCreateManyStoreInputEnvelope
    set?: AltrenameWhereUniqueInput | AltrenameWhereUniqueInput[]
    disconnect?: AltrenameWhereUniqueInput | AltrenameWhereUniqueInput[]
    delete?: AltrenameWhereUniqueInput | AltrenameWhereUniqueInput[]
    connect?: AltrenameWhereUniqueInput | AltrenameWhereUniqueInput[]
    update?: AltrenameUpdateWithWhereUniqueWithoutStoreInput | AltrenameUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: AltrenameUpdateManyWithWhereWithoutStoreInput | AltrenameUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: AltrenameScalarWhereInput | AltrenameScalarWhereInput[]
  }

  export type StoreCreateNestedOneWithoutFilerenameInput = {
    create?: XOR<StoreCreateWithoutFilerenameInput, StoreUncheckedCreateWithoutFilerenameInput>
    connectOrCreate?: StoreCreateOrConnectWithoutFilerenameInput
    connect?: StoreWhereUniqueInput
  }

  export type StoreUpdateOneRequiredWithoutFilerenameNestedInput = {
    create?: XOR<StoreCreateWithoutFilerenameInput, StoreUncheckedCreateWithoutFilerenameInput>
    connectOrCreate?: StoreCreateOrConnectWithoutFilerenameInput
    upsert?: StoreUpsertWithoutFilerenameInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutFilerenameInput, StoreUpdateWithoutFilerenameInput>, StoreUncheckedUpdateWithoutFilerenameInput>
  }

  export type StoreCreateNestedOneWithoutAltrenameInput = {
    create?: XOR<StoreCreateWithoutAltrenameInput, StoreUncheckedCreateWithoutAltrenameInput>
    connectOrCreate?: StoreCreateOrConnectWithoutAltrenameInput
    connect?: StoreWhereUniqueInput
  }

  export type StoreUpdateOneRequiredWithoutAltrenameNestedInput = {
    create?: XOR<StoreCreateWithoutAltrenameInput, StoreUncheckedCreateWithoutAltrenameInput>
    connectOrCreate?: StoreCreateOrConnectWithoutAltrenameInput
    upsert?: StoreUpsertWithoutAltrenameInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutAltrenameInput, StoreUpdateWithoutAltrenameInput>, StoreUncheckedUpdateWithoutAltrenameInput>
  }

  export type ImageCreateNestedManyWithoutProductInput = {
    create?: XOR<ImageCreateWithoutProductInput, ImageUncheckedCreateWithoutProductInput> | ImageCreateWithoutProductInput[] | ImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutProductInput | ImageCreateOrConnectWithoutProductInput[]
    createMany?: ImageCreateManyProductInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type StoreCreateNestedOneWithoutProductInput = {
    create?: XOR<StoreCreateWithoutProductInput, StoreUncheckedCreateWithoutProductInput>
    connectOrCreate?: StoreCreateOrConnectWithoutProductInput
    connect?: StoreWhereUniqueInput
  }

  export type ImageUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ImageCreateWithoutProductInput, ImageUncheckedCreateWithoutProductInput> | ImageCreateWithoutProductInput[] | ImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutProductInput | ImageCreateOrConnectWithoutProductInput[]
    createMany?: ImageCreateManyProductInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type ImageUpdateManyWithoutProductNestedInput = {
    create?: XOR<ImageCreateWithoutProductInput, ImageUncheckedCreateWithoutProductInput> | ImageCreateWithoutProductInput[] | ImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutProductInput | ImageCreateOrConnectWithoutProductInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutProductInput | ImageUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ImageCreateManyProductInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutProductInput | ImageUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutProductInput | ImageUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type StoreUpdateOneRequiredWithoutProductNestedInput = {
    create?: XOR<StoreCreateWithoutProductInput, StoreUncheckedCreateWithoutProductInput>
    connectOrCreate?: StoreCreateOrConnectWithoutProductInput
    upsert?: StoreUpsertWithoutProductInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutProductInput, StoreUpdateWithoutProductInput>, StoreUncheckedUpdateWithoutProductInput>
  }

  export type ImageUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ImageCreateWithoutProductInput, ImageUncheckedCreateWithoutProductInput> | ImageCreateWithoutProductInput[] | ImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutProductInput | ImageCreateOrConnectWithoutProductInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutProductInput | ImageUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ImageCreateManyProductInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutProductInput | ImageUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutProductInput | ImageUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutImagesInput = {
    create?: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagesInput
    connect?: ProductWhereUniqueInput
  }

  export type NullableEnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ProductUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagesInput
    upsert?: ProductUpsertWithoutImagesInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutImagesInput, ProductUpdateWithoutImagesInput>, ProductUncheckedUpdateWithoutImagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanFilter<$PrismaModel> | $Enums.Plan
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumCompressTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CompressType | EnumCompressTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompressType[] | ListEnumCompressTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompressType[] | ListEnumCompressTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompressTypeNullableFilter<$PrismaModel> | $Enums.CompressType | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Plan | EnumPlanFieldRefInput<$PrismaModel>
    in?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.Plan[] | ListEnumPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanWithAggregatesFilter<$PrismaModel> | $Enums.Plan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanFilter<$PrismaModel>
    _max?: NestedEnumPlanFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumCompressTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompressType | EnumCompressTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.CompressType[] | ListEnumCompressTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CompressType[] | ListEnumCompressTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCompressTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.CompressType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCompressTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumCompressTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatusNullableFilter<$PrismaModel> | $Enums.Status | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.Status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumStatusNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type ProductCreateWithoutStoreInput = {
    id: string
    title: string
    product_vendor?: string | null
    variant_title?: string | null
    product_page_title?: string | null
    product_type?: string | null
    product_barcode?: string | null
    product_title?: string | null
    product_sku?: string | null
    images?: ImageCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutStoreInput = {
    id: string
    title: string
    product_vendor?: string | null
    variant_title?: string | null
    product_page_title?: string | null
    product_type?: string | null
    product_barcode?: string | null
    product_title?: string | null
    product_sku?: string | null
    images?: ImageUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutStoreInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutStoreInput, ProductUncheckedCreateWithoutStoreInput>
  }

  export type ProductCreateManyStoreInputEnvelope = {
    data: ProductCreateManyStoreInput | ProductCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type FilerenameCreateWithoutStoreInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
  }

  export type FilerenameUncheckedCreateWithoutStoreInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
  }

  export type FilerenameCreateOrConnectWithoutStoreInput = {
    where: FilerenameWhereUniqueInput
    create: XOR<FilerenameCreateWithoutStoreInput, FilerenameUncheckedCreateWithoutStoreInput>
  }

  export type FilerenameCreateManyStoreInputEnvelope = {
    data: FilerenameCreateManyStoreInput | FilerenameCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type AltrenameCreateWithoutStoreInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
  }

  export type AltrenameUncheckedCreateWithoutStoreInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
  }

  export type AltrenameCreateOrConnectWithoutStoreInput = {
    where: AltrenameWhereUniqueInput
    create: XOR<AltrenameCreateWithoutStoreInput, AltrenameUncheckedCreateWithoutStoreInput>
  }

  export type AltrenameCreateManyStoreInputEnvelope = {
    data: AltrenameCreateManyStoreInput | AltrenameCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutStoreInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutStoreInput, ProductUncheckedUpdateWithoutStoreInput>
    create: XOR<ProductCreateWithoutStoreInput, ProductUncheckedCreateWithoutStoreInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutStoreInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutStoreInput, ProductUncheckedUpdateWithoutStoreInput>
  }

  export type ProductUpdateManyWithWhereWithoutStoreInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutStoreInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: StringFilter<"Product"> | string
    title?: StringFilter<"Product"> | string
    product_vendor?: StringNullableFilter<"Product"> | string | null
    variant_title?: StringNullableFilter<"Product"> | string | null
    product_page_title?: StringNullableFilter<"Product"> | string | null
    product_type?: StringNullableFilter<"Product"> | string | null
    product_barcode?: StringNullableFilter<"Product"> | string | null
    product_title?: StringNullableFilter<"Product"> | string | null
    product_sku?: StringNullableFilter<"Product"> | string | null
    storename?: StringFilter<"Product"> | string
  }

  export type FilerenameUpsertWithWhereUniqueWithoutStoreInput = {
    where: FilerenameWhereUniqueInput
    update: XOR<FilerenameUpdateWithoutStoreInput, FilerenameUncheckedUpdateWithoutStoreInput>
    create: XOR<FilerenameCreateWithoutStoreInput, FilerenameUncheckedCreateWithoutStoreInput>
  }

  export type FilerenameUpdateWithWhereUniqueWithoutStoreInput = {
    where: FilerenameWhereUniqueInput
    data: XOR<FilerenameUpdateWithoutStoreInput, FilerenameUncheckedUpdateWithoutStoreInput>
  }

  export type FilerenameUpdateManyWithWhereWithoutStoreInput = {
    where: FilerenameScalarWhereInput
    data: XOR<FilerenameUpdateManyMutationInput, FilerenameUncheckedUpdateManyWithoutStoreInput>
  }

  export type FilerenameScalarWhereInput = {
    AND?: FilerenameScalarWhereInput | FilerenameScalarWhereInput[]
    OR?: FilerenameScalarWhereInput[]
    NOT?: FilerenameScalarWhereInput | FilerenameScalarWhereInput[]
    id?: StringFilter<"Filerename"> | string
    product_vendor?: BoolFilter<"Filerename"> | boolean
    variant_title?: BoolFilter<"Filerename"> | boolean
    product_page_title?: BoolFilter<"Filerename"> | boolean
    product_type?: BoolFilter<"Filerename"> | boolean
    product_barcode?: BoolFilter<"Filerename"> | boolean
    product_title?: BoolFilter<"Filerename"> | boolean
    product_sku?: BoolFilter<"Filerename"> | boolean
    storename?: StringFilter<"Filerename"> | string
  }

  export type AltrenameUpsertWithWhereUniqueWithoutStoreInput = {
    where: AltrenameWhereUniqueInput
    update: XOR<AltrenameUpdateWithoutStoreInput, AltrenameUncheckedUpdateWithoutStoreInput>
    create: XOR<AltrenameCreateWithoutStoreInput, AltrenameUncheckedCreateWithoutStoreInput>
  }

  export type AltrenameUpdateWithWhereUniqueWithoutStoreInput = {
    where: AltrenameWhereUniqueInput
    data: XOR<AltrenameUpdateWithoutStoreInput, AltrenameUncheckedUpdateWithoutStoreInput>
  }

  export type AltrenameUpdateManyWithWhereWithoutStoreInput = {
    where: AltrenameScalarWhereInput
    data: XOR<AltrenameUpdateManyMutationInput, AltrenameUncheckedUpdateManyWithoutStoreInput>
  }

  export type AltrenameScalarWhereInput = {
    AND?: AltrenameScalarWhereInput | AltrenameScalarWhereInput[]
    OR?: AltrenameScalarWhereInput[]
    NOT?: AltrenameScalarWhereInput | AltrenameScalarWhereInput[]
    id?: StringFilter<"Altrename"> | string
    product_vendor?: BoolFilter<"Altrename"> | boolean
    variant_title?: BoolFilter<"Altrename"> | boolean
    product_page_title?: BoolFilter<"Altrename"> | boolean
    product_type?: BoolFilter<"Altrename"> | boolean
    product_barcode?: BoolFilter<"Altrename"> | boolean
    product_title?: BoolFilter<"Altrename"> | boolean
    product_sku?: BoolFilter<"Altrename"> | boolean
    storename?: StringFilter<"Altrename"> | string
  }

  export type StoreCreateWithoutFilerenameInput = {
    name: string
    plan?: $Enums.Plan
    dataUsed?: number | null
    chargeId?: string | null
    autoCompression?: boolean
    autoFileRename?: boolean
    batchCompress?: boolean
    batchRestore?: boolean
    autoAltRename?: boolean
    compressionType?: $Enums.CompressType | null
    jpeg?: number | null
    png?: number | null
    others?: number | null
    product?: ProductCreateNestedManyWithoutStoreInput
    altrename?: AltrenameCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutFilerenameInput = {
    name: string
    plan?: $Enums.Plan
    dataUsed?: number | null
    chargeId?: string | null
    autoCompression?: boolean
    autoFileRename?: boolean
    batchCompress?: boolean
    batchRestore?: boolean
    autoAltRename?: boolean
    compressionType?: $Enums.CompressType | null
    jpeg?: number | null
    png?: number | null
    others?: number | null
    product?: ProductUncheckedCreateNestedManyWithoutStoreInput
    altrename?: AltrenameUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutFilerenameInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutFilerenameInput, StoreUncheckedCreateWithoutFilerenameInput>
  }

  export type StoreUpsertWithoutFilerenameInput = {
    update: XOR<StoreUpdateWithoutFilerenameInput, StoreUncheckedUpdateWithoutFilerenameInput>
    create: XOR<StoreCreateWithoutFilerenameInput, StoreUncheckedCreateWithoutFilerenameInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutFilerenameInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutFilerenameInput, StoreUncheckedUpdateWithoutFilerenameInput>
  }

  export type StoreUpdateWithoutFilerenameInput = {
    name?: StringFieldUpdateOperationsInput | string
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    dataUsed?: NullableFloatFieldUpdateOperationsInput | number | null
    chargeId?: NullableStringFieldUpdateOperationsInput | string | null
    autoCompression?: BoolFieldUpdateOperationsInput | boolean
    autoFileRename?: BoolFieldUpdateOperationsInput | boolean
    batchCompress?: BoolFieldUpdateOperationsInput | boolean
    batchRestore?: BoolFieldUpdateOperationsInput | boolean
    autoAltRename?: BoolFieldUpdateOperationsInput | boolean
    compressionType?: NullableEnumCompressTypeFieldUpdateOperationsInput | $Enums.CompressType | null
    jpeg?: NullableFloatFieldUpdateOperationsInput | number | null
    png?: NullableFloatFieldUpdateOperationsInput | number | null
    others?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: ProductUpdateManyWithoutStoreNestedInput
    altrename?: AltrenameUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutFilerenameInput = {
    name?: StringFieldUpdateOperationsInput | string
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    dataUsed?: NullableFloatFieldUpdateOperationsInput | number | null
    chargeId?: NullableStringFieldUpdateOperationsInput | string | null
    autoCompression?: BoolFieldUpdateOperationsInput | boolean
    autoFileRename?: BoolFieldUpdateOperationsInput | boolean
    batchCompress?: BoolFieldUpdateOperationsInput | boolean
    batchRestore?: BoolFieldUpdateOperationsInput | boolean
    autoAltRename?: BoolFieldUpdateOperationsInput | boolean
    compressionType?: NullableEnumCompressTypeFieldUpdateOperationsInput | $Enums.CompressType | null
    jpeg?: NullableFloatFieldUpdateOperationsInput | number | null
    png?: NullableFloatFieldUpdateOperationsInput | number | null
    others?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: ProductUncheckedUpdateManyWithoutStoreNestedInput
    altrename?: AltrenameUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreCreateWithoutAltrenameInput = {
    name: string
    plan?: $Enums.Plan
    dataUsed?: number | null
    chargeId?: string | null
    autoCompression?: boolean
    autoFileRename?: boolean
    batchCompress?: boolean
    batchRestore?: boolean
    autoAltRename?: boolean
    compressionType?: $Enums.CompressType | null
    jpeg?: number | null
    png?: number | null
    others?: number | null
    product?: ProductCreateNestedManyWithoutStoreInput
    filerename?: FilerenameCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutAltrenameInput = {
    name: string
    plan?: $Enums.Plan
    dataUsed?: number | null
    chargeId?: string | null
    autoCompression?: boolean
    autoFileRename?: boolean
    batchCompress?: boolean
    batchRestore?: boolean
    autoAltRename?: boolean
    compressionType?: $Enums.CompressType | null
    jpeg?: number | null
    png?: number | null
    others?: number | null
    product?: ProductUncheckedCreateNestedManyWithoutStoreInput
    filerename?: FilerenameUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutAltrenameInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutAltrenameInput, StoreUncheckedCreateWithoutAltrenameInput>
  }

  export type StoreUpsertWithoutAltrenameInput = {
    update: XOR<StoreUpdateWithoutAltrenameInput, StoreUncheckedUpdateWithoutAltrenameInput>
    create: XOR<StoreCreateWithoutAltrenameInput, StoreUncheckedCreateWithoutAltrenameInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutAltrenameInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutAltrenameInput, StoreUncheckedUpdateWithoutAltrenameInput>
  }

  export type StoreUpdateWithoutAltrenameInput = {
    name?: StringFieldUpdateOperationsInput | string
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    dataUsed?: NullableFloatFieldUpdateOperationsInput | number | null
    chargeId?: NullableStringFieldUpdateOperationsInput | string | null
    autoCompression?: BoolFieldUpdateOperationsInput | boolean
    autoFileRename?: BoolFieldUpdateOperationsInput | boolean
    batchCompress?: BoolFieldUpdateOperationsInput | boolean
    batchRestore?: BoolFieldUpdateOperationsInput | boolean
    autoAltRename?: BoolFieldUpdateOperationsInput | boolean
    compressionType?: NullableEnumCompressTypeFieldUpdateOperationsInput | $Enums.CompressType | null
    jpeg?: NullableFloatFieldUpdateOperationsInput | number | null
    png?: NullableFloatFieldUpdateOperationsInput | number | null
    others?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: ProductUpdateManyWithoutStoreNestedInput
    filerename?: FilerenameUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutAltrenameInput = {
    name?: StringFieldUpdateOperationsInput | string
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    dataUsed?: NullableFloatFieldUpdateOperationsInput | number | null
    chargeId?: NullableStringFieldUpdateOperationsInput | string | null
    autoCompression?: BoolFieldUpdateOperationsInput | boolean
    autoFileRename?: BoolFieldUpdateOperationsInput | boolean
    batchCompress?: BoolFieldUpdateOperationsInput | boolean
    batchRestore?: BoolFieldUpdateOperationsInput | boolean
    autoAltRename?: BoolFieldUpdateOperationsInput | boolean
    compressionType?: NullableEnumCompressTypeFieldUpdateOperationsInput | $Enums.CompressType | null
    jpeg?: NullableFloatFieldUpdateOperationsInput | number | null
    png?: NullableFloatFieldUpdateOperationsInput | number | null
    others?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: ProductUncheckedUpdateManyWithoutStoreNestedInput
    filerename?: FilerenameUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type ImageCreateWithoutProductInput = {
    id: string
    url: string
    name?: string | null
    alt?: string | null
    status?: $Enums.Status | null
    fileRename?: boolean | null
    altRename?: boolean | null
  }

  export type ImageUncheckedCreateWithoutProductInput = {
    id: string
    url: string
    name?: string | null
    alt?: string | null
    status?: $Enums.Status | null
    fileRename?: boolean | null
    altRename?: boolean | null
  }

  export type ImageCreateOrConnectWithoutProductInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutProductInput, ImageUncheckedCreateWithoutProductInput>
  }

  export type ImageCreateManyProductInputEnvelope = {
    data: ImageCreateManyProductInput | ImageCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type StoreCreateWithoutProductInput = {
    name: string
    plan?: $Enums.Plan
    dataUsed?: number | null
    chargeId?: string | null
    autoCompression?: boolean
    autoFileRename?: boolean
    batchCompress?: boolean
    batchRestore?: boolean
    autoAltRename?: boolean
    compressionType?: $Enums.CompressType | null
    jpeg?: number | null
    png?: number | null
    others?: number | null
    filerename?: FilerenameCreateNestedManyWithoutStoreInput
    altrename?: AltrenameCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutProductInput = {
    name: string
    plan?: $Enums.Plan
    dataUsed?: number | null
    chargeId?: string | null
    autoCompression?: boolean
    autoFileRename?: boolean
    batchCompress?: boolean
    batchRestore?: boolean
    autoAltRename?: boolean
    compressionType?: $Enums.CompressType | null
    jpeg?: number | null
    png?: number | null
    others?: number | null
    filerename?: FilerenameUncheckedCreateNestedManyWithoutStoreInput
    altrename?: AltrenameUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutProductInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutProductInput, StoreUncheckedCreateWithoutProductInput>
  }

  export type ImageUpsertWithWhereUniqueWithoutProductInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutProductInput, ImageUncheckedUpdateWithoutProductInput>
    create: XOR<ImageCreateWithoutProductInput, ImageUncheckedCreateWithoutProductInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutProductInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutProductInput, ImageUncheckedUpdateWithoutProductInput>
  }

  export type ImageUpdateManyWithWhereWithoutProductInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutProductInput>
  }

  export type ImageScalarWhereInput = {
    AND?: ImageScalarWhereInput | ImageScalarWhereInput[]
    OR?: ImageScalarWhereInput[]
    NOT?: ImageScalarWhereInput | ImageScalarWhereInput[]
    id?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    name?: StringNullableFilter<"Image"> | string | null
    alt?: StringNullableFilter<"Image"> | string | null
    productId?: StringFilter<"Image"> | string
    status?: EnumStatusNullableFilter<"Image"> | $Enums.Status | null
    fileRename?: BoolNullableFilter<"Image"> | boolean | null
    altRename?: BoolNullableFilter<"Image"> | boolean | null
  }

  export type StoreUpsertWithoutProductInput = {
    update: XOR<StoreUpdateWithoutProductInput, StoreUncheckedUpdateWithoutProductInput>
    create: XOR<StoreCreateWithoutProductInput, StoreUncheckedCreateWithoutProductInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutProductInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutProductInput, StoreUncheckedUpdateWithoutProductInput>
  }

  export type StoreUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    dataUsed?: NullableFloatFieldUpdateOperationsInput | number | null
    chargeId?: NullableStringFieldUpdateOperationsInput | string | null
    autoCompression?: BoolFieldUpdateOperationsInput | boolean
    autoFileRename?: BoolFieldUpdateOperationsInput | boolean
    batchCompress?: BoolFieldUpdateOperationsInput | boolean
    batchRestore?: BoolFieldUpdateOperationsInput | boolean
    autoAltRename?: BoolFieldUpdateOperationsInput | boolean
    compressionType?: NullableEnumCompressTypeFieldUpdateOperationsInput | $Enums.CompressType | null
    jpeg?: NullableFloatFieldUpdateOperationsInput | number | null
    png?: NullableFloatFieldUpdateOperationsInput | number | null
    others?: NullableFloatFieldUpdateOperationsInput | number | null
    filerename?: FilerenameUpdateManyWithoutStoreNestedInput
    altrename?: AltrenameUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    plan?: EnumPlanFieldUpdateOperationsInput | $Enums.Plan
    dataUsed?: NullableFloatFieldUpdateOperationsInput | number | null
    chargeId?: NullableStringFieldUpdateOperationsInput | string | null
    autoCompression?: BoolFieldUpdateOperationsInput | boolean
    autoFileRename?: BoolFieldUpdateOperationsInput | boolean
    batchCompress?: BoolFieldUpdateOperationsInput | boolean
    batchRestore?: BoolFieldUpdateOperationsInput | boolean
    autoAltRename?: BoolFieldUpdateOperationsInput | boolean
    compressionType?: NullableEnumCompressTypeFieldUpdateOperationsInput | $Enums.CompressType | null
    jpeg?: NullableFloatFieldUpdateOperationsInput | number | null
    png?: NullableFloatFieldUpdateOperationsInput | number | null
    others?: NullableFloatFieldUpdateOperationsInput | number | null
    filerename?: FilerenameUncheckedUpdateManyWithoutStoreNestedInput
    altrename?: AltrenameUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type ProductCreateWithoutImagesInput = {
    id: string
    title: string
    product_vendor?: string | null
    variant_title?: string | null
    product_page_title?: string | null
    product_type?: string | null
    product_barcode?: string | null
    product_title?: string | null
    product_sku?: string | null
    store: StoreCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutImagesInput = {
    id: string
    title: string
    product_vendor?: string | null
    variant_title?: string | null
    product_page_title?: string | null
    product_type?: string | null
    product_barcode?: string | null
    product_title?: string | null
    product_sku?: string | null
    storename: string
  }

  export type ProductCreateOrConnectWithoutImagesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
  }

  export type ProductUpsertWithoutImagesInput = {
    update: XOR<ProductUpdateWithoutImagesInput, ProductUncheckedUpdateWithoutImagesInput>
    create: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutImagesInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutImagesInput, ProductUncheckedUpdateWithoutImagesInput>
  }

  export type ProductUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    product_vendor?: NullableStringFieldUpdateOperationsInput | string | null
    variant_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_page_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    product_barcode?: NullableStringFieldUpdateOperationsInput | string | null
    product_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    store?: StoreUpdateOneRequiredWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    product_vendor?: NullableStringFieldUpdateOperationsInput | string | null
    variant_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_page_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    product_barcode?: NullableStringFieldUpdateOperationsInput | string | null
    product_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    storename?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateManyStoreInput = {
    id: string
    title: string
    product_vendor?: string | null
    variant_title?: string | null
    product_page_title?: string | null
    product_type?: string | null
    product_barcode?: string | null
    product_title?: string | null
    product_sku?: string | null
  }

  export type FilerenameCreateManyStoreInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
  }

  export type AltrenameCreateManyStoreInput = {
    id: string
    product_vendor?: boolean
    variant_title?: boolean
    product_page_title?: boolean
    product_type?: boolean
    product_barcode?: boolean
    product_title?: boolean
    product_sku?: boolean
  }

  export type ProductUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    product_vendor?: NullableStringFieldUpdateOperationsInput | string | null
    variant_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_page_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    product_barcode?: NullableStringFieldUpdateOperationsInput | string | null
    product_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    product_vendor?: NullableStringFieldUpdateOperationsInput | string | null
    variant_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_page_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    product_barcode?: NullableStringFieldUpdateOperationsInput | string | null
    product_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    product_vendor?: NullableStringFieldUpdateOperationsInput | string | null
    variant_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_page_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    product_barcode?: NullableStringFieldUpdateOperationsInput | string | null
    product_title?: NullableStringFieldUpdateOperationsInput | string | null
    product_sku?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FilerenameUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FilerenameUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FilerenameUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AltrenameUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AltrenameUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AltrenameUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_vendor?: BoolFieldUpdateOperationsInput | boolean
    variant_title?: BoolFieldUpdateOperationsInput | boolean
    product_page_title?: BoolFieldUpdateOperationsInput | boolean
    product_type?: BoolFieldUpdateOperationsInput | boolean
    product_barcode?: BoolFieldUpdateOperationsInput | boolean
    product_title?: BoolFieldUpdateOperationsInput | boolean
    product_sku?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ImageCreateManyProductInput = {
    id: string
    url: string
    name?: string | null
    alt?: string | null
    status?: $Enums.Status | null
    fileRename?: boolean | null
    altRename?: boolean | null
  }

  export type ImageUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    fileRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
    altRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ImageUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    fileRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
    altRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ImageUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumStatusFieldUpdateOperationsInput | $Enums.Status | null
    fileRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
    altRename?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StoreCountOutputTypeDefaultArgs instead
     */
    export type StoreCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StoreCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StoreDefaultArgs instead
     */
    export type StoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StoreDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FilerenameDefaultArgs instead
     */
    export type FilerenameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FilerenameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AltrenameDefaultArgs instead
     */
    export type AltrenameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AltrenameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImageDefaultArgs instead
     */
    export type ImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BackupimageDefaultArgs instead
     */
    export type BackupimageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BackupimageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BackupfilenameDefaultArgs instead
     */
    export type BackupfilenameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BackupfilenameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BackupaltnameDefaultArgs instead
     */
    export type BackupaltnameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BackupaltnameDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}